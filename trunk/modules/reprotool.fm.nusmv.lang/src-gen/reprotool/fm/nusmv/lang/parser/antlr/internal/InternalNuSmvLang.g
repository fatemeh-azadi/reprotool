/*
* generated by Xtext
*/
grammar InternalNuSmvLang;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package reprotool.fm.nusmv.lang.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package reprotool.fm.nusmv.lang.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import reprotool.fm.nusmv.lang.services.NuSmvLangGrammarAccess;

}

@parser::members {

 	private NuSmvLangGrammarAccess grammarAccess;
 	
    public InternalNuSmvLangParser(TokenStream input, NuSmvLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected NuSmvLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getModulesModuleParserRuleCall_0()); 
	    }
		lv_modules_0_0=ruleModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"modules",
        		lv_modules_0_0, 
        		"Module");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='MODULE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getMODULEKeyword_0());
    }
(
    { 
        newCompositeNode(grammarAccess.getModuleAccess().getMainModuleParserRuleCall_1_0()); 
    }
    this_MainModule_1=ruleMainModule
    { 
        $current = $this_MainModule_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleAccess().getOtherModuleParserRuleCall_1_1()); 
    }
    this_OtherModule_2=ruleOtherModule
    { 
        $current = $this_OtherModule_2.current; 
        afterParserOrEnumRuleCall();
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getModuleElementModuleElementParserRuleCall_2_0()); 
	    }
		lv_moduleElement_3_0=ruleModuleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"moduleElement",
        		lv_moduleElement_3_0, 
        		"ModuleElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleMainModule
entryRuleMainModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainModuleRule()); }
	 iv_ruleMainModule=ruleMainModule 
	 { $current=$iv_ruleMainModule.current; } 
	 EOF 
;

// Rule MainModule
ruleMainModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'main' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getMainModuleAccess().getNameMainKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMainModuleRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "main");
	    }

)
)
;





// Entry rule entryRuleOtherModule
entryRuleOtherModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOtherModuleRule()); }
	 iv_ruleOtherModule=ruleOtherModule 
	 { $current=$iv_ruleOtherModule.current; } 
	 EOF 
;

// Rule OtherModule
ruleOtherModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getOtherModuleAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOtherModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOtherModuleAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherModuleAccess().getParamsFormalParameterParserRuleCall_1_1_0()); 
	    }
		lv_params_2_0=ruleFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherModuleRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"FormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOtherModuleAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherModuleAccess().getParamsFormalParameterParserRuleCall_1_2_1_0()); 
	    }
		lv_params_4_0=ruleFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherModuleRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"FormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOtherModuleAccess().getRightParenthesisKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleModuleElement
entryRuleModuleElement returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getModuleElementRule()); }
	 iv_ruleModuleElement=ruleModuleElement 
	 { $current=$iv_ruleModuleElement.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ModuleElement
ruleModuleElement returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModuleElementAccess().getVariableDeclarationParserRuleCall_0()); 
    }
    this_VariableDeclaration_0=ruleVariableDeclaration
    { 
        $current = $this_VariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleElementAccess().getIVariableDeclarationParserRuleCall_1()); 
    }
    this_IVariableDeclaration_1=ruleIVariableDeclaration
    { 
        $current = $this_IVariableDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleElementAccess().getFrozenVariableDeclarationParserRuleCall_2()); 
    }
    this_FrozenVariableDeclaration_2=ruleFrozenVariableDeclaration
    { 
        $current = $this_FrozenVariableDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleElementAccess().getDefineDeclarationParserRuleCall_3()); 
    }
    this_DefineDeclaration_3=ruleDefineDeclaration
    { 
        $current = $this_DefineDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleElementAccess().getConstantsDeclarationParserRuleCall_4()); 
    }
    this_ConstantsDeclaration_4=ruleConstantsDeclaration
    { 
        $current = $this_ConstantsDeclaration_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleElementAccess().getAssignConstraintParserRuleCall_5()); 
    }
    this_AssignConstraint_5=ruleAssignConstraint
    { 
        $current = $this_AssignConstraint_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleElementAccess().getTransConstraintParserRuleCall_6()); 
    }
    this_TransConstraint_6=ruleTransConstraint
    { 
        $current = $this_TransConstraint_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleElementAccess().getInitConstraintParserRuleCall_7()); 
    }
    this_InitConstraint_7=ruleInitConstraint
    { 
        $current = $this_InitConstraint_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleElementAccess().getInvarConstraintParserRuleCall_8()); 
    }
    this_InvarConstraint_8=ruleInvarConstraint
    { 
        $current = $this_InvarConstraint_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleElementAccess().getFairnessConstraintParserRuleCall_9()); 
    }
    this_FairnessConstraint_9=ruleFairnessConstraint
    { 
        $current = $this_FairnessConstraint_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleElementAccess().getCtlSpecificationParserRuleCall_10()); 
    }
    this_CtlSpecification_10=ruleCtlSpecification
    { 
        $current = $this_CtlSpecification_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleElementAccess().getLtlSpecificationParserRuleCall_11()); 
    }
    this_LtlSpecification_11=ruleLtlSpecification
    { 
        $current = $this_LtlSpecification_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleElementAccess().getInvarSpecificationParserRuleCall_12()); 
    }
    this_InvarSpecification_12=ruleInvarSpecification
    { 
        $current = $this_InvarSpecification_12.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='VAR' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getVARKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVarsVarBodyParserRuleCall_1_0()); 
	    }
		lv_vars_1_0=ruleVarBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		add(
       			$current, 
       			"vars",
        		lv_vars_1_0, 
        		"VarBody");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleIVariableDeclaration
entryRuleIVariableDeclaration returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getIVariableDeclarationRule()); }
	 iv_ruleIVariableDeclaration=ruleIVariableDeclaration 
	 { $current=$iv_ruleIVariableDeclaration.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule IVariableDeclaration
ruleIVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='IVAR' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIVariableDeclarationAccess().getIVARKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIVariableDeclarationAccess().getVarsVarBodyParserRuleCall_1_0()); 
	    }
		lv_vars_1_0=ruleVarBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIVariableDeclarationRule());
	        }
       		add(
       			$current, 
       			"vars",
        		lv_vars_1_0, 
        		"VarBody");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleFrozenVariableDeclaration
entryRuleFrozenVariableDeclaration returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getFrozenVariableDeclarationRule()); }
	 iv_ruleFrozenVariableDeclaration=ruleFrozenVariableDeclaration 
	 { $current=$iv_ruleFrozenVariableDeclaration.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FrozenVariableDeclaration
ruleFrozenVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='FROZENVAR' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFrozenVariableDeclarationAccess().getFROZENVARKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFrozenVariableDeclarationAccess().getVarsVarBodyParserRuleCall_1_0()); 
	    }
		lv_vars_1_0=ruleVarBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFrozenVariableDeclarationRule());
	        }
       		add(
       			$current, 
       			"vars",
        		lv_vars_1_0, 
        		"VarBody");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleVarBody
entryRuleVarBody returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getVarBodyRule()); }
	 iv_ruleVarBody=ruleVarBody 
	 { $current=$iv_ruleVarBody.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule VarBody
ruleVarBody returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		lv_varId_0_0=RULE_ID
		{
			newLeafNode(lv_varId_0_0, grammarAccess.getVarBodyAccess().getVarIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarBodyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"varId",
        		lv_varId_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarBodyAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarBodyAccess().getTypeTypeSpecifierParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarBodyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVarBodyAccess().getSemicolonKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDefineDeclaration
entryRuleDefineDeclaration returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getDefineDeclarationRule()); }
	 iv_ruleDefineDeclaration=ruleDefineDeclaration 
	 { $current=$iv_ruleDefineDeclaration.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DefineDeclaration
ruleDefineDeclaration returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='DEFINE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefineDeclarationAccess().getDEFINEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineDeclarationAccess().getDefineBodiesDefineBodyParserRuleCall_1_0()); 
	    }
		lv_defineBodies_1_0=ruleDefineBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineDeclarationRule());
	        }
       		add(
       			$current, 
       			"defineBodies",
        		lv_defineBodies_1_0, 
        		"DefineBody");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDefineBody
entryRuleDefineBody returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getDefineBodyRule()); }
	 iv_ruleDefineBody=ruleDefineBody 
	 { $current=$iv_ruleDefineBody.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DefineBody
ruleDefineBody returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		lv_varId_0_0=RULE_ID
		{
			newLeafNode(lv_varId_0_0, grammarAccess.getDefineBodyAccess().getVarIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefineBodyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"varId",
        		lv_varId_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefineBodyAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineBodyAccess().getAssignmentSimpleExpressionParserRuleCall_2_0()); 
	    }
		lv_assignment_2_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineBodyRule());
	        }
       		set(
       			$current, 
       			"assignment",
        		lv_assignment_2_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefineBodyAccess().getSemicolonKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleConstantsDeclaration
entryRuleConstantsDeclaration returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getConstantsDeclarationRule()); }
	 iv_ruleConstantsDeclaration=ruleConstantsDeclaration 
	 { $current=$iv_ruleConstantsDeclaration.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ConstantsDeclaration
ruleConstantsDeclaration returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='CONSTANTS' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantsDeclarationAccess().getCONSTANTSKeyword_0());
    }
(
(
		lv_constants_1_0=RULE_ID
		{
			newLeafNode(lv_constants_1_0, grammarAccess.getConstantsDeclarationAccess().getConstantsIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantsDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"constants",
        		lv_constants_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantsDeclarationAccess().getCommaKeyword_2_0());
    }
(
(
		lv_constants_3_0=RULE_ID
		{
			newLeafNode(lv_constants_3_0, grammarAccess.getConstantsDeclarationAccess().getConstantsIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantsDeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"constants",
        		lv_constants_3_0, 
        		"ID");
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantsDeclarationAccess().getSemicolonKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAssignConstraint
entryRuleAssignConstraint returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getAssignConstraintRule()); }
	 iv_ruleAssignConstraint=ruleAssignConstraint 
	 { $current=$iv_ruleAssignConstraint.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AssignConstraint
ruleAssignConstraint returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='ASSIGN' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssignConstraintAccess().getASSIGNKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignConstraintAccess().getBodiesAssignBodyParserRuleCall_1_0()); 
	    }
		lv_bodies_1_0=ruleAssignBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignConstraintRule());
	        }
       		add(
       			$current, 
       			"bodies",
        		lv_bodies_1_0, 
        		"AssignBody");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAssignBody
entryRuleAssignBody returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getAssignBodyRule()); }
	 iv_ruleAssignBody=ruleAssignBody 
	 { $current=$iv_ruleAssignBody.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AssignBody
ruleAssignBody returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignBodyAccess().getVarBodyAssignParserRuleCall_0()); 
    }
    this_VarBodyAssign_0=ruleVarBodyAssign
    { 
        $current = $this_VarBodyAssign_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssignBodyAccess().getInitBodyParserRuleCall_1()); 
    }
    this_InitBody_1=ruleInitBody
    { 
        $current = $this_InitBody_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAssignBodyAccess().getNextBodyParserRuleCall_2()); 
    }
    this_NextBody_2=ruleNextBody
    { 
        $current = $this_NextBody_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleVarBodyAssign
entryRuleVarBodyAssign returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getVarBodyAssignRule()); }
	 iv_ruleVarBodyAssign=ruleVarBodyAssign 
	 { $current=$iv_ruleVarBodyAssign.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule VarBodyAssign
ruleVarBodyAssign returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVarBodyAssignAccess().getVarIdVariableIdentifierParserRuleCall_0_0()); 
	    }
		lv_varId_0_0=ruleVariableIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarBodyAssignRule());
	        }
       		set(
       			$current, 
       			"varId",
        		lv_varId_0_0, 
        		"VariableIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarBodyAssignAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarBodyAssignAccess().getAssignmentSimpleExpressionParserRuleCall_2_0()); 
	    }
		lv_assignment_2_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarBodyAssignRule());
	        }
       		set(
       			$current, 
       			"assignment",
        		lv_assignment_2_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVarBodyAssignAccess().getSemicolonKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleInitBody
entryRuleInitBody returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getInitBodyRule()); }
	 iv_ruleInitBody=ruleInitBody 
	 { $current=$iv_ruleInitBody.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule InitBody
ruleInitBody returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='init' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInitBodyAccess().getInitKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInitBodyAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitBodyAccess().getVarIdVariableIdentifierParserRuleCall_2_0()); 
	    }
		lv_varId_2_0=ruleVariableIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitBodyRule());
	        }
       		set(
       			$current, 
       			"varId",
        		lv_varId_2_0, 
        		"VariableIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInitBodyAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4=':=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInitBodyAccess().getColonEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitBodyAccess().getInitExprSimpleExpressionParserRuleCall_5_0()); 
	    }
		lv_initExpr_5_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitBodyRule());
	        }
       		set(
       			$current, 
       			"initExpr",
        		lv_initExpr_5_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInitBodyAccess().getSemicolonKeyword_6());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleNextBody
entryRuleNextBody returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getNextBodyRule()); }
	 iv_ruleNextBody=ruleNextBody 
	 { $current=$iv_ruleNextBody.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule NextBody
ruleNextBody returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='next' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNextBodyAccess().getNextKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNextBodyAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNextBodyAccess().getVarIdVariableIdentifierParserRuleCall_2_0()); 
	    }
		lv_varId_2_0=ruleVariableIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNextBodyRule());
	        }
       		set(
       			$current, 
       			"varId",
        		lv_varId_2_0, 
        		"VariableIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNextBodyAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4=':=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNextBodyAccess().getColonEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNextBodyAccess().getNextExprSimpleExpressionParserRuleCall_5_0()); 
	    }
		lv_nextExpr_5_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNextBodyRule());
	        }
       		set(
       			$current, 
       			"nextExpr",
        		lv_nextExpr_5_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNextBodyAccess().getSemicolonKeyword_6());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTransConstraint
entryRuleTransConstraint returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getTransConstraintRule()); }
	 iv_ruleTransConstraint=ruleTransConstraint 
	 { $current=$iv_ruleTransConstraint.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TransConstraint
ruleTransConstraint returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='TRANS' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransConstraintAccess().getTRANSKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransConstraintAccess().getTransExprSimpleExpressionParserRuleCall_1_0()); 
	    }
		lv_transExpr_1_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransConstraintRule());
	        }
       		set(
       			$current, 
       			"transExpr",
        		lv_transExpr_1_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransConstraintAccess().getSemicolonKeyword_2());
    }
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleInitConstraint
entryRuleInitConstraint returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getInitConstraintRule()); }
	 iv_ruleInitConstraint=ruleInitConstraint 
	 { $current=$iv_ruleInitConstraint.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule InitConstraint
ruleInitConstraint returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='INIT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInitConstraintAccess().getINITKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitConstraintAccess().getInitExprSimpleExpressionParserRuleCall_1_0()); 
	    }
		lv_initExpr_1_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitConstraintRule());
	        }
       		set(
       			$current, 
       			"initExpr",
        		lv_initExpr_1_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInitConstraintAccess().getSemicolonKeyword_2());
    }
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleInvarConstraint
entryRuleInvarConstraint returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getInvarConstraintRule()); }
	 iv_ruleInvarConstraint=ruleInvarConstraint 
	 { $current=$iv_ruleInvarConstraint.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule InvarConstraint
ruleInvarConstraint returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='INVAR' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInvarConstraintAccess().getINVARKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInvarConstraintAccess().getInvarExprSimpleExpressionParserRuleCall_1_0()); 
	    }
		lv_invarExpr_1_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvarConstraintRule());
	        }
       		set(
       			$current, 
       			"invarExpr",
        		lv_invarExpr_1_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInvarConstraintAccess().getSemicolonKeyword_2());
    }
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleFairnessConstraint
entryRuleFairnessConstraint returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getFairnessConstraintRule()); }
	 iv_ruleFairnessConstraint=ruleFairnessConstraint 
	 { $current=$iv_ruleFairnessConstraint.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FairnessConstraint
ruleFairnessConstraint returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFairnessConstraintAccess().getFairnessExpressionParserRuleCall_0()); 
    }
    this_FairnessExpression_0=ruleFairnessExpression
    { 
        $current = $this_FairnessExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFairnessConstraintAccess().getJusticeExpressionParserRuleCall_1()); 
    }
    this_JusticeExpression_1=ruleJusticeExpression
    { 
        $current = $this_JusticeExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFairnessConstraintAccess().getCompassionExpressionParserRuleCall_2()); 
    }
    this_CompassionExpression_2=ruleCompassionExpression
    { 
        $current = $this_CompassionExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleFairnessExpression
entryRuleFairnessExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getFairnessExpressionRule()); }
	 iv_ruleFairnessExpression=ruleFairnessExpression 
	 { $current=$iv_ruleFairnessExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule FairnessExpression
ruleFairnessExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='FAIRNESS' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFairnessExpressionAccess().getFAIRNESSKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFairnessExpressionAccess().getFairnessExprSimpleExpressionParserRuleCall_1_0()); 
	    }
		lv_fairnessExpr_1_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFairnessExpressionRule());
	        }
       		set(
       			$current, 
       			"fairnessExpr",
        		lv_fairnessExpr_1_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFairnessExpressionAccess().getSemicolonKeyword_2());
    }
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleJusticeExpression
entryRuleJusticeExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getJusticeExpressionRule()); }
	 iv_ruleJusticeExpression=ruleJusticeExpression 
	 { $current=$iv_ruleJusticeExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule JusticeExpression
ruleJusticeExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='JUSTICE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJusticeExpressionAccess().getJUSTICEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJusticeExpressionAccess().getJusticeExprSimpleExpressionParserRuleCall_1_0()); 
	    }
		lv_justiceExpr_1_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJusticeExpressionRule());
	        }
       		set(
       			$current, 
       			"justiceExpr",
        		lv_justiceExpr_1_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJusticeExpressionAccess().getSemicolonKeyword_2());
    }
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleCompassionExpression
entryRuleCompassionExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getCompassionExpressionRule()); }
	 iv_ruleCompassionExpression=ruleCompassionExpression 
	 { $current=$iv_ruleCompassionExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CompassionExpression
ruleCompassionExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='COMPASSION (' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCompassionExpressionAccess().getCOMPASSIONKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompassionExpressionAccess().getFirstCompassionExprSimpleExpressionParserRuleCall_1_0()); 
	    }
		lv_firstCompassionExpr_1_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompassionExpressionRule());
	        }
       		set(
       			$current, 
       			"firstCompassionExpr",
        		lv_firstCompassionExpr_1_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCompassionExpressionAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompassionExpressionAccess().getSecondCompassionExprSimpleExpressionParserRuleCall_3_0()); 
	    }
		lv_secondCompassionExpr_3_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompassionExpressionRule());
	        }
       		set(
       			$current, 
       			"secondCompassionExpr",
        		lv_secondCompassionExpr_3_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCompassionExpressionAccess().getRightParenthesisKeyword_4());
    }
(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCompassionExpressionAccess().getSemicolonKeyword_5());
    }
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleInvarSpecification
entryRuleInvarSpecification returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getInvarSpecificationRule()); }
	 iv_ruleInvarSpecification=ruleInvarSpecification 
	 { $current=$iv_ruleInvarSpecification.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule InvarSpecification
ruleInvarSpecification returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='INVARSPEC' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInvarSpecificationAccess().getINVARSPECKeyword_0());
    }
((
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInvarSpecificationAccess().getNameIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInvarSpecificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInvarSpecificationAccess().getColonEqualsSignKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInvarSpecificationAccess().getInvarExprSimpleExpressionParserRuleCall_2_0()); 
	    }
		lv_invarExpr_3_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvarSpecificationRule());
	        }
       		set(
       			$current, 
       			"invarExpr",
        		lv_invarExpr_3_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInvarSpecificationAccess().getSemicolonKeyword_3());
    }
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleCtlSpecification
entryRuleCtlSpecification returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getCtlSpecificationRule()); }
	 iv_ruleCtlSpecification=ruleCtlSpecification 
	 { $current=$iv_ruleCtlSpecification.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CtlSpecification
ruleCtlSpecification returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((	otherlv_0='CTLSPEC' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCtlSpecificationAccess().getCTLSPECKeyword_0_0());
    }

    |	otherlv_1='SPEC' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCtlSpecificationAccess().getSPECKeyword_0_1());
    }
)((
(
		lv_nameKeyWord_2_0=	'NAME' 
    {
        newLeafNode(lv_nameKeyWord_2_0, grammarAccess.getCtlSpecificationAccess().getNameKeyWordNAMEKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCtlSpecificationRule());
	        }
       		setWithLastConsumed($current, "nameKeyWord", true, "NAME");
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getCtlSpecificationAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCtlSpecificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4=':=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCtlSpecificationAccess().getColonEqualsSignKeyword_1_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCtlSpecificationAccess().getCtlExprSimpleExpressionParserRuleCall_2_0()); 
	    }
		lv_ctlExpr_5_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCtlSpecificationRule());
	        }
       		set(
       			$current, 
       			"ctlExpr",
        		lv_ctlExpr_5_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCtlSpecificationAccess().getSemicolonKeyword_3());
    }
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleLtlSpecification
entryRuleLtlSpecification returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getLtlSpecificationRule()); }
	 iv_ruleLtlSpecification=ruleLtlSpecification 
	 { $current=$iv_ruleLtlSpecification.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule LtlSpecification
ruleLtlSpecification returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(	otherlv_0='LTLSPEC' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLtlSpecificationAccess().getLTLSPECKeyword_0());
    }
((
(
		lv_nameId_1_0=	'NAME' 
    {
        newLeafNode(lv_nameId_1_0, grammarAccess.getLtlSpecificationAccess().getNameIdNAMEKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLtlSpecificationRule());
	        }
       		setWithLastConsumed($current, "nameId", true, "NAME");
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getLtlSpecificationAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLtlSpecificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLtlSpecificationAccess().getColonEqualsSignKeyword_1_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLtlSpecificationAccess().getLtlExprSimpleExpressionParserRuleCall_2_0()); 
	    }
		lv_ltlExpr_4_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLtlSpecificationRule());
	        }
       		set(
       			$current, 
       			"ltlExpr",
        		lv_ltlExpr_4_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLtlSpecificationAccess().getSemicolonKeyword_3());
    }
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getTypeSpecifierRule()); }
	 iv_ruleTypeSpecifier=ruleTypeSpecifier 
	 { $current=$iv_ruleTypeSpecifier.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TypeSpecifier
ruleTypeSpecifier returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeSpecifierAccess().getSimpleTypeParserRuleCall_0()); 
    }
    this_SimpleType_0=ruleSimpleType
    { 
        $current = $this_SimpleType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeSpecifierAccess().getModuleTypeParserRuleCall_1()); 
    }
    this_ModuleType_1=ruleModuleType
    { 
        $current = $this_ModuleType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSimpleType
entryRuleSimpleType returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getSimpleTypeRule()); }
	 iv_ruleSimpleType=ruleSimpleType 
	 { $current=$iv_ruleSimpleType.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SimpleType
ruleSimpleType returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleTypeAccess().getBooleanTypeAction_0_0(),
            $current);
    }
)	otherlv_1='boolean' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleTypeAccess().getBooleanKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleTypeAccess().getWordTypeAction_1_0(),
            $current);
    }
)(	otherlv_3='word' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimpleTypeAccess().getWordKeyword_1_1_0());
    }
	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSimpleTypeAccess().getLeftSquareBracketKeyword_1_1_1());
    }
(
(
		lv_wordNumber_5_0=RULE_NUMBER
		{
			newLeafNode(lv_wordNumber_5_0, grammarAccess.getSimpleTypeAccess().getWordNumberNUMBERTerminalRuleCall_1_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"wordNumber",
        		lv_wordNumber_5_0, 
        		"NUMBER");
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSimpleTypeAccess().getRightSquareBracketKeyword_1_1_3());
    }
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleTypeAccess().getUnsignedWordTypeAction_2_0(),
            $current);
    }
)(	otherlv_8='unsigned' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSimpleTypeAccess().getUnsignedKeyword_2_1_0());
    }
	otherlv_9='word' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSimpleTypeAccess().getWordKeyword_2_1_1());
    }
	otherlv_10='[' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSimpleTypeAccess().getLeftSquareBracketKeyword_2_1_2());
    }
(
(
		lv_uWordNumber_11_0=RULE_NUMBER
		{
			newLeafNode(lv_uWordNumber_11_0, grammarAccess.getSimpleTypeAccess().getUWordNumberNUMBERTerminalRuleCall_2_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"uWordNumber",
        		lv_uWordNumber_11_0, 
        		"NUMBER");
	    }

)
)	otherlv_12=']' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSimpleTypeAccess().getRightSquareBracketKeyword_2_1_4());
    }
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleTypeAccess().getSignedWordTypeAction_3_0(),
            $current);
    }
)(	otherlv_14='signed word' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSimpleTypeAccess().getSignedWordKeyword_3_1_0());
    }
	otherlv_15='[' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getSimpleTypeAccess().getLeftSquareBracketKeyword_3_1_1());
    }
(
(
		lv_signedNumber_16_0=RULE_NUMBER
		{
			newLeafNode(lv_signedNumber_16_0, grammarAccess.getSimpleTypeAccess().getSignedNumberNUMBERTerminalRuleCall_3_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"signedNumber",
        		lv_signedNumber_16_0, 
        		"NUMBER");
	    }

)
)	otherlv_17=']' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getSimpleTypeAccess().getRightSquareBracketKeyword_3_1_3());
    }
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleTypeAccess().getEnumTypeAction_4_0(),
            $current);
    }
)	otherlv_19='{' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getSimpleTypeAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTypeAccess().getValueValParserRuleCall_4_2_0()); 
	    }
		lv_value_20_0=ruleVal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_20_0, 
        		"Val");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_21=',' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getSimpleTypeAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTypeAccess().getValueValParserRuleCall_4_3_1_0()); 
	    }
		lv_value_22_0=ruleVal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
	        }
       		add(
       			$current, 
       			"value",
        		lv_value_22_0, 
        		"Val");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_23='}' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getSimpleTypeAccess().getRightCurlyBracketKeyword_4_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleTypeAccess().getRangeTypeAction_5_0(),
            $current);
    }
)(
(
		lv_low_25_0=RULE_NUMBER
		{
			newLeafNode(lv_low_25_0, grammarAccess.getSimpleTypeAccess().getLowNUMBERTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"low",
        		lv_low_25_0, 
        		"NUMBER");
	    }

)
)	otherlv_26='..' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getSimpleTypeAccess().getFullStopFullStopKeyword_5_2());
    }
(
(
		lv_high_27_0=RULE_NUMBER
		{
			newLeafNode(lv_high_27_0, grammarAccess.getSimpleTypeAccess().getHighNUMBERTerminalRuleCall_5_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"high",
        		lv_high_27_0, 
        		"NUMBER");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimpleTypeAccess().getArrayTypeAction_6_0(),
            $current);
    }
)	otherlv_29='array' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getSimpleTypeAccess().getArrayKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTypeAccess().getBoundsRangeParserRuleCall_6_2_0()); 
	    }
		lv_bounds_30_0=ruleRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
	        }
       		set(
       			$current, 
       			"bounds",
        		lv_bounds_30_0, 
        		"Range");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_31='of' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getSimpleTypeAccess().getOfKeyword_6_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTypeAccess().getTypeSimpleTypeParserRuleCall_6_4_0()); 
	    }
		lv_type_32_0=ruleSimpleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_32_0, 
        		"SimpleType");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleModuleType
entryRuleModuleType returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getModuleTypeRule()); }
	 iv_ruleModuleType=ruleModuleType 
	 { $current=$iv_ruleModuleType.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ModuleType
ruleModuleType returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModuleTypeAccess().getAsyncrProcessTypeAction_0_0(),
            $current);
    }
)(	otherlv_1='process' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleTypeAccess().getProcessKeyword_0_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleTypeRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getModuleTypeAccess().getModuleModuleCrossReference_0_1_1_0()); 
	}

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleTypeAccess().getLeftParenthesisKeyword_0_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_0_1_2_1_0()); 
	    }
		lv_params_4_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleTypeRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModuleTypeAccess().getCommaKeyword_0_1_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_0_1_2_2_1_0()); 
	    }
		lv_params_6_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleTypeRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_6_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getModuleTypeAccess().getRightParenthesisKeyword_0_1_2_3());
    }
)?))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModuleTypeAccess().getSyncrProcessTypeAction_1_0(),
            $current);
    }
)((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleTypeRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getModuleTypeAccess().getModuleModuleCrossReference_1_1_0_0()); 
	}

)
)(	otherlv_10='(' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getModuleTypeAccess().getLeftParenthesisKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_1_1_1_1_0()); 
	    }
		lv_params_11_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleTypeRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_11_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getModuleTypeAccess().getCommaKeyword_1_1_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleTypeAccess().getParamsSimpleExpressionParserRuleCall_1_1_1_2_1_0()); 
	    }
		lv_params_13_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleTypeRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_13_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getModuleTypeAccess().getRightParenthesisKeyword_1_1_1_3());
    }
)?)))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleFormalParameter
entryRuleFormalParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormalParameterRule()); }
	 iv_ruleFormalParameter=ruleFormalParameter 
	 { $current=$iv_ruleFormalParameter.current; } 
	 EOF 
;

// Rule FormalParameter
ruleFormalParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_paramId_0_0=RULE_ID
		{
			newLeafNode(lv_paramId_0_0, grammarAccess.getFormalParameterAccess().getParamIdIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormalParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"paramId",
        		lv_paramId_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); } 
	 iv_ruleSimpleExpression=ruleSimpleExpression 
	 { $current=$iv_ruleSimpleExpression.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SimpleExpression
ruleSimpleExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getBinaryExpressionParserRuleCall()); 
    }
    this_BinaryExpression_0=ruleBinaryExpression    {
		$current.merge(this_BinaryExpression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleBinaryExpression
entryRuleBinaryExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryExpressionRule()); } 
	 iv_ruleBinaryExpression=ruleBinaryExpression 
	 { $current=$iv_ruleBinaryExpression.current.getText(); }  
	 EOF 
;

// Rule BinaryExpression
ruleBinaryExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinaryExpressionAccess().getTerminalSimpleExpressionParserRuleCall_0()); 
    }
    this_TerminalSimpleExpression_0=ruleTerminalSimpleExpression    {
		$current.merge(this_TerminalSimpleExpression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getBinaryExpressionAccess().getBinaryOperatorParserRuleCall_1_0()); 
    }
    this_BinaryOperator_1=ruleBinaryOperator    {
		$current.merge(this_BinaryOperator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getBinaryExpressionAccess().getTerminalSimpleExpressionParserRuleCall_1_1()); 
    }
    this_TerminalSimpleExpression_2=ruleTerminalSimpleExpression    {
		$current.merge(this_TerminalSimpleExpression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleTerminalSimpleExpression
entryRuleTerminalSimpleExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalSimpleExpressionRule()); } 
	 iv_ruleTerminalSimpleExpression=ruleTerminalSimpleExpression 
	 { $current=$iv_ruleTerminalSimpleExpression.current.getText(); }  
	 EOF 
;

// Rule TerminalSimpleExpression
ruleTerminalSimpleExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getLiteralParserRuleCall_0()); 
    }
    this_Literal_0=ruleLiteral    {
		$current.merge(this_Literal_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getRangeParserRuleCall_1()); 
    }
    this_Range_1=ruleRange    {
		$current.merge(this_Range_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getNextExpressionParserRuleCall_2()); 
    }
    this_NextExpression_2=ruleNextExpression    {
		$current.merge(this_NextExpression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getBracketExpressionParserRuleCall_3()); 
    }
    this_BracketExpression_3=ruleBracketExpression    {
		$current.merge(this_BracketExpression_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getUnaryExpressionParserRuleCall_4()); 
    }
    this_UnaryExpression_4=ruleUnaryExpression    {
		$current.merge(this_UnaryExpression_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getCaseExpressionParserRuleCall_5()); 
    }
    this_CaseExpression_5=ruleCaseExpression    {
		$current.merge(this_CaseExpression_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getSetExpressionParserRuleCall_6()); 
    }
    this_SetExpression_6=ruleSetExpression    {
		$current.merge(this_SetExpression_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getEAExpressionParserRuleCall_7()); 
    }
    this_EAExpression_7=ruleEAExpression    {
		$current.merge(this_EAExpression_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalSimpleExpressionAccess().getBoolWordConvertExpressionParserRuleCall_8()); 
    }
    this_BoolWordConvertExpression_8=ruleBoolWordConvertExpression    {
		$current.merge(this_BoolWordConvertExpression_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleNextExpression
entryRuleNextExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNextExpressionRule()); } 
	 iv_ruleNextExpression=ruleNextExpression 
	 { $current=$iv_ruleNextExpression.current.getText(); }  
	 EOF 
;

// Rule NextExpression
ruleNextExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='next' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNextExpressionAccess().getNextKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNextExpressionAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getNextExpressionAccess().getSimpleExpressionParserRuleCall_2()); 
    }
    this_SimpleExpression_2=ruleSimpleExpression    {
		$current.merge(this_SimpleExpression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNextExpressionAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleBracketExpression
entryRuleBracketExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBracketExpressionRule()); } 
	 iv_ruleBracketExpression=ruleBracketExpression 
	 { $current=$iv_ruleBracketExpression.current.getText(); }  
	 EOF 
;

// Rule BracketExpression
ruleBracketExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBracketExpressionAccess().getLeftParenthesisKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getBracketExpressionAccess().getSimpleExpressionParserRuleCall_1()); 
    }
    this_SimpleExpression_1=ruleSimpleExpression    {
		$current.merge(this_SimpleExpression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBracketExpressionAccess().getRightParenthesisKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); } 
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current.getText(); }  
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnaryOperatorParserRuleCall_0()); 
    }
    this_UnaryOperator_0=ruleUnaryOperator    {
		$current.merge(this_UnaryOperator_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getSimpleExpressionParserRuleCall_1()); 
    }
    this_SimpleExpression_1=ruleSimpleExpression    {
		$current.merge(this_SimpleExpression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleCaseExpression
entryRuleCaseExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseExpressionRule()); } 
	 iv_ruleCaseExpression=ruleCaseExpression 
	 { $current=$iv_ruleCaseExpression.current.getText(); }  
	 EOF 
;

// Rule CaseExpression
ruleCaseExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='case' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCaseExpressionAccess().getCaseKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getCaseExpressionAccess().getSimpleExpressionParserRuleCall_1_0()); 
    }
    this_SimpleExpression_1=ruleSimpleExpression    {
		$current.merge(this_SimpleExpression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCaseExpressionAccess().getColonKeyword_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getCaseExpressionAccess().getSimpleExpressionParserRuleCall_1_2()); 
    }
    this_SimpleExpression_3=ruleSimpleExpression    {
		$current.merge(this_SimpleExpression_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCaseExpressionAccess().getSemicolonKeyword_1_3()); 
    }
)+
	kw='esac' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCaseExpressionAccess().getEsacKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleSetExpression
entryRuleSetExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetExpressionRule()); } 
	 iv_ruleSetExpression=ruleSetExpression 
	 { $current=$iv_ruleSetExpression.current.getText(); }  
	 EOF 
;

// Rule SetExpression
ruleSetExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSetExpressionAccess().getLeftCurlyBracketKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getSetExpressionAccess().getSimpleExpressionParserRuleCall_1()); 
    }
    this_SimpleExpression_1=ruleSimpleExpression    {
		$current.merge(this_SimpleExpression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSetExpressionAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getSetExpressionAccess().getSimpleExpressionParserRuleCall_2_1()); 
    }
    this_SimpleExpression_3=ruleSimpleExpression    {
		$current.merge(this_SimpleExpression_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSetExpressionAccess().getRightCurlyBracketKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleEAExpression
entryRuleEAExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEAExpressionRule()); } 
	 iv_ruleEAExpression=ruleEAExpression 
	 { $current=$iv_ruleEAExpression.current.getText(); }  
	 EOF 
;

// Rule EAExpression
ruleEAExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEAExpressionAccess().getEKeyword_0_0()); 
    }

    |
	kw='A' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEAExpressionAccess().getAKeyword_0_1()); 
    }
)
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEAExpressionAccess().getLeftSquareBracketKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getEAExpressionAccess().getSimpleExpressionParserRuleCall_2()); 
    }
    this_SimpleExpression_3=ruleSimpleExpression    {
		$current.merge(this_SimpleExpression_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEAExpressionAccess().getRightSquareBracketKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleBoolWordConvertExpression
entryRuleBoolWordConvertExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolWordConvertExpressionRule()); } 
	 iv_ruleBoolWordConvertExpression=ruleBoolWordConvertExpression 
	 { $current=$iv_ruleBoolWordConvertExpression.current.getText(); }  
	 EOF 
;

// Rule BoolWordConvertExpression
ruleBoolWordConvertExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='word1' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolWordConvertExpressionAccess().getWord1Keyword_0_0()); 
    }

    |
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolWordConvertExpressionAccess().getBoolKeyword_0_1()); 
    }
)
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolWordConvertExpressionAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getBoolWordConvertExpressionAccess().getSimpleExpressionParserRuleCall_2()); 
    }
    this_SimpleExpression_3=ruleSimpleExpression    {
		$current.merge(this_SimpleExpression_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolWordConvertExpressionAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleBooleanConstant
entryRuleBooleanConstant returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanConstantRule()); } 
	 iv_ruleBooleanConstant=ruleBooleanConstant 
	 { $current=$iv_ruleBooleanConstant.current.getText(); }  
	 EOF 
;

// Rule BooleanConstant
ruleBooleanConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='TRUE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanConstantAccess().getTRUEKeyword_0()); 
    }

    |
	kw='FALSE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanConstantAccess().getFALSEKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBinaryOperator
entryRuleBinaryOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryOperatorRule()); } 
	 iv_ruleBinaryOperator=ruleBinaryOperator 
	 { $current=$iv_ruleBinaryOperator.current.getText(); }  
	 EOF 
;

// Rule BinaryOperator
ruleBinaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='U' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getUKeyword_0()); 
    }

    |
	kw='V' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getVKeyword_1()); 
    }

    |
	kw='S' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getSKeyword_2()); 
    }

    |
	kw='T' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getTKeyword_3()); 
    }

    |
	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getHyphenMinusGreaterThanSignKeyword_4()); 
    }

    |
	kw='<->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_5()); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getAmpersandKeyword_6()); 
    }

    |
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getVerticalLineKeyword_7()); 
    }

    |
	kw='xor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getXorKeyword_8()); 
    }

    |
	kw='xnor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getXnorKeyword_9()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getEqualsSignKeyword_10()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getExclamationMarkEqualsSignKeyword_11()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getLessThanSignKeyword_12()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getGreaterThanSignKeyword_13()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getLessThanSignEqualsSignKeyword_14()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getGreaterThanSignEqualsSignKeyword_15()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getPlusSignKeyword_16()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getHyphenMinusKeyword_17()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getAsteriskKeyword_18()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getSolidusKeyword_19()); 
    }

    |
	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getColonColonKeyword_20()); 
    }

    |
	kw='<<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getLessThanSignLessThanSignKeyword_21()); 
    }

    |
	kw='>>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_22()); 
    }

    |
	kw='union' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getUnionKeyword_23()); 
    }

    |
	kw='in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getInKeyword_24()); 
    }

    |
	kw='mod' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBinaryOperatorAccess().getModKeyword_25()); 
    }
)
    ;





// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOperatorRule()); } 
	 iv_ruleUnaryOperator=ruleUnaryOperator 
	 { $current=$iv_ruleUnaryOperator.current.getText(); }  
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getExclamationMarkKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getPlusSignKeyword_2()); 
    }

    |
	kw='X' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getXKeyword_3()); 
    }

    |
	kw='G' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getGKeyword_4()); 
    }

    |
	kw='F' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getFKeyword_5()); 
    }

    |
	kw='Y' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getYKeyword_6()); 
    }

    |
	kw='Z' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getZKeyword_7()); 
    }

    |
	kw='H' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getHKeyword_8()); 
    }

    |
	kw='O' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getOKeyword_9()); 
    }

    |
	kw='EG' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getEGKeyword_10()); 
    }

    |
	kw='EX' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getEXKeyword_11()); 
    }

    |
	kw='EF' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getEFKeyword_12()); 
    }

    |
	kw='AG' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getAGKeyword_13()); 
    }

    |
	kw='AX' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getAXKeyword_14()); 
    }

    |
	kw='AF' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getAFKeyword_15()); 
    }
)
    ;





// Entry rule entryRuleRange
entryRuleRange returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeRule()); } 
	 iv_ruleRange=ruleRange 
	 { $current=$iv_ruleRange.current.getText(); }  
	 EOF 
;

// Rule Range
ruleRange returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_NUMBER_0=RULE_NUMBER    {
		$current.merge(this_NUMBER_0);
    }

    { 
    newLeafNode(this_NUMBER_0, grammarAccess.getRangeAccess().getNUMBERTerminalRuleCall_0()); 
    }

	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRangeAccess().getFullStopFullStopKeyword_1()); 
    }
    this_NUMBER_2=RULE_NUMBER    {
		$current.merge(this_NUMBER_2);
    }

    { 
    newLeafNode(this_NUMBER_2, grammarAccess.getRangeAccess().getNUMBERTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleVal
entryRuleVal returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getValRule()); } 
	 iv_ruleVal=ruleVal 
	 { $current=$iv_ruleVal.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Val
ruleVal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_NUMBER_1=RULE_NUMBER    {
		$current.merge(this_NUMBER_1);
    }

    { 
    newLeafNode(this_NUMBER_1, grammarAccess.getValAccess().getNUMBERTerminalRuleCall_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getValAccess().getBooleanConstantParserRuleCall_2()); 
    }
    this_BooleanConstant_2=ruleBooleanConstant    {
		$current.merge(this_BooleanConstant_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_NUMBER_0=RULE_NUMBER    {
		$current.merge(this_NUMBER_0);
    }

    { 
    newLeafNode(this_NUMBER_0, grammarAccess.getLiteralAccess().getNUMBERTerminalRuleCall_0()); 
    }

    |
	kw='self' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getSelfKeyword_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanConstantParserRuleCall_2()); 
    }
    this_BooleanConstant_2=ruleBooleanConstant    {
		$current.merge(this_BooleanConstant_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getVariableIdentifierParserRuleCall_3()); 
    }
    this_VariableIdentifier_3=ruleVariableIdentifier    {
		$current.merge(this_VariableIdentifier_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleVariableIdentifier
entryRuleVariableIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableIdentifierRule()); } 
	 iv_ruleVariableIdentifier=ruleVariableIdentifier 
	 { $current=$iv_ruleVariableIdentifier.current.getText(); }  
	 EOF 
;

// Rule VariableIdentifier
ruleVariableIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getVariableIdentifierAccess().getIDTerminalRuleCall_0_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableIdentifierAccess().getFullStopKeyword_0_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getVariableIdentifierAccess().getIDTerminalRuleCall_0_1_1()); 
    }
)*)
    |(    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getVariableIdentifierAccess().getIDTerminalRuleCall_1_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableIdentifierAccess().getFullStopKeyword_1_1_0()); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getVariableIdentifierAccess().getIDTerminalRuleCall_1_1_1()); 
    }
)*(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableIdentifierAccess().getLeftSquareBracketKeyword_1_2_0()); 
    }
(    this_NUMBER_7=RULE_NUMBER    {
		$current.merge(this_NUMBER_7);
    }

    { 
    newLeafNode(this_NUMBER_7, grammarAccess.getVariableIdentifierAccess().getNUMBERTerminalRuleCall_1_2_1_0()); 
    }

    |    this_ID_8=RULE_ID    {
		$current.merge(this_ID_8);
    }

    { 
    newLeafNode(this_ID_8, grammarAccess.getVariableIdentifierAccess().getIDTerminalRuleCall_1_2_1_1()); 
    }
)
	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableIdentifierAccess().getRightSquareBracketKeyword_1_2_2()); 
    }
)+)
    |(    this_ID_10=RULE_ID    {
		$current.merge(this_ID_10);
    }

    { 
    newLeafNode(this_ID_10, grammarAccess.getVariableIdentifierAccess().getIDTerminalRuleCall_2_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableIdentifierAccess().getFullStopKeyword_2_1_0()); 
    }
    this_ID_12=RULE_ID    {
		$current.merge(this_ID_12);
    }

    { 
    newLeafNode(this_ID_12, grammarAccess.getVariableIdentifierAccess().getIDTerminalRuleCall_2_1_1()); 
    }
)*
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableIdentifierAccess().getLeftSquareBracketKeyword_2_2()); 
    }
    this_NUMBER_14=RULE_NUMBER    {
		$current.merge(this_NUMBER_14);
    }

    { 
    newLeafNode(this_NUMBER_14, grammarAccess.getVariableIdentifierAccess().getNUMBERTerminalRuleCall_2_3()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableIdentifierAccess().getColonKeyword_2_4()); 
    }
    this_NUMBER_16=RULE_NUMBER    {
		$current.merge(this_NUMBER_16);
    }

    { 
    newLeafNode(this_NUMBER_16, grammarAccess.getVariableIdentifierAccess().getNUMBERTerminalRuleCall_2_5()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableIdentifierAccess().getRightSquareBracketKeyword_2_6()); 
    }
))
    ;





RULE_NUMBER : RULE_INT;

RULE_SL_COMMENT : '--' RULE_SL_COMMENT_BODY;

fragment RULE_SL_COMMENT_BODY : ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : ('A'..'Z'|'a'..'z'|'_') ('A'..'Z'|'a'..'z'|'_'|'0'..'9'|'$'|'#'|'-'|'.')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


