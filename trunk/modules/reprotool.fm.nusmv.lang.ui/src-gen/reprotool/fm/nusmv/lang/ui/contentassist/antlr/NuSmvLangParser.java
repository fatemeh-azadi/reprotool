/*
* generated by Xtext
*/
package reprotool.fm.nusmv.lang.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import reprotool.fm.nusmv.lang.services.NuSmvLangGrammarAccess;

public class NuSmvLangParser extends AbstractContentAssistParser {
	
	@Inject
	private NuSmvLangGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected reprotool.fm.nusmv.lang.ui.contentassist.antlr.internal.InternalNuSmvLangParser createParser() {
		reprotool.fm.nusmv.lang.ui.contentassist.antlr.internal.InternalNuSmvLangParser result = new reprotool.fm.nusmv.lang.ui.contentassist.antlr.internal.InternalNuSmvLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModuleAccess().getAlternatives_1(), "rule__Module__Alternatives_1");
					put(grammarAccess.getModuleElementAccess().getAlternatives(), "rule__ModuleElement__Alternatives");
					put(grammarAccess.getAssignBodyAccess().getAlternatives(), "rule__AssignBody__Alternatives");
					put(grammarAccess.getFairnessConstraintAccess().getAlternatives(), "rule__FairnessConstraint__Alternatives");
					put(grammarAccess.getCtlSpecificationAccess().getAlternatives_0(), "rule__CtlSpecification__Alternatives_0");
					put(grammarAccess.getTypeSpecifierAccess().getAlternatives(), "rule__TypeSpecifier__Alternatives");
					put(grammarAccess.getSimpleTypeAccess().getAlternatives(), "rule__SimpleType__Alternatives");
					put(grammarAccess.getModuleTypeAccess().getAlternatives(), "rule__ModuleType__Alternatives");
					put(grammarAccess.getTerminalSimpleExpressionAccess().getAlternatives(), "rule__TerminalSimpleExpression__Alternatives");
					put(grammarAccess.getEAExpressionAccess().getAlternatives_0(), "rule__EAExpression__Alternatives_0");
					put(grammarAccess.getBoolWordConvertExpressionAccess().getAlternatives_0(), "rule__BoolWordConvertExpression__Alternatives_0");
					put(grammarAccess.getBooleanConstantAccess().getAlternatives(), "rule__BooleanConstant__Alternatives");
					put(grammarAccess.getBinaryOperatorAccess().getAlternatives(), "rule__BinaryOperator__Alternatives");
					put(grammarAccess.getUnaryOperatorAccess().getAlternatives(), "rule__UnaryOperator__Alternatives");
					put(grammarAccess.getValAccess().getAlternatives(), "rule__Val__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getVariableIdentifierAccess().getAlternatives(), "rule__VariableIdentifier__Alternatives");
					put(grammarAccess.getVariableIdentifierAccess().getAlternatives_1_2_1(), "rule__VariableIdentifier__Alternatives_1_2_1");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getOtherModuleAccess().getGroup(), "rule__OtherModule__Group__0");
					put(grammarAccess.getOtherModuleAccess().getGroup_1(), "rule__OtherModule__Group_1__0");
					put(grammarAccess.getOtherModuleAccess().getGroup_1_2(), "rule__OtherModule__Group_1_2__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getIVariableDeclarationAccess().getGroup(), "rule__IVariableDeclaration__Group__0");
					put(grammarAccess.getFrozenVariableDeclarationAccess().getGroup(), "rule__FrozenVariableDeclaration__Group__0");
					put(grammarAccess.getVarBodyAccess().getGroup(), "rule__VarBody__Group__0");
					put(grammarAccess.getDefineDeclarationAccess().getGroup(), "rule__DefineDeclaration__Group__0");
					put(grammarAccess.getDefineBodyAccess().getGroup(), "rule__DefineBody__Group__0");
					put(grammarAccess.getConstantsDeclarationAccess().getGroup(), "rule__ConstantsDeclaration__Group__0");
					put(grammarAccess.getConstantsDeclarationAccess().getGroup_2(), "rule__ConstantsDeclaration__Group_2__0");
					put(grammarAccess.getAssignConstraintAccess().getGroup(), "rule__AssignConstraint__Group__0");
					put(grammarAccess.getVarBodyAssignAccess().getGroup(), "rule__VarBodyAssign__Group__0");
					put(grammarAccess.getInitBodyAccess().getGroup(), "rule__InitBody__Group__0");
					put(grammarAccess.getNextBodyAccess().getGroup(), "rule__NextBody__Group__0");
					put(grammarAccess.getTransConstraintAccess().getGroup(), "rule__TransConstraint__Group__0");
					put(grammarAccess.getInitConstraintAccess().getGroup(), "rule__InitConstraint__Group__0");
					put(grammarAccess.getInvarConstraintAccess().getGroup(), "rule__InvarConstraint__Group__0");
					put(grammarAccess.getFairnessExpressionAccess().getGroup(), "rule__FairnessExpression__Group__0");
					put(grammarAccess.getJusticeExpressionAccess().getGroup(), "rule__JusticeExpression__Group__0");
					put(grammarAccess.getCompassionExpressionAccess().getGroup(), "rule__CompassionExpression__Group__0");
					put(grammarAccess.getInvarSpecificationAccess().getGroup(), "rule__InvarSpecification__Group__0");
					put(grammarAccess.getInvarSpecificationAccess().getGroup_1(), "rule__InvarSpecification__Group_1__0");
					put(grammarAccess.getCtlSpecificationAccess().getGroup(), "rule__CtlSpecification__Group__0");
					put(grammarAccess.getCtlSpecificationAccess().getGroup_1(), "rule__CtlSpecification__Group_1__0");
					put(grammarAccess.getLtlSpecificationAccess().getGroup(), "rule__LtlSpecification__Group__0");
					put(grammarAccess.getLtlSpecificationAccess().getGroup_1(), "rule__LtlSpecification__Group_1__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_0(), "rule__SimpleType__Group_0__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_1(), "rule__SimpleType__Group_1__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_1_1(), "rule__SimpleType__Group_1_1__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_2(), "rule__SimpleType__Group_2__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_2_1(), "rule__SimpleType__Group_2_1__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_3(), "rule__SimpleType__Group_3__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_3_1(), "rule__SimpleType__Group_3_1__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_4(), "rule__SimpleType__Group_4__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_4_3(), "rule__SimpleType__Group_4_3__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_5(), "rule__SimpleType__Group_5__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_6(), "rule__SimpleType__Group_6__0");
					put(grammarAccess.getModuleTypeAccess().getGroup_0(), "rule__ModuleType__Group_0__0");
					put(grammarAccess.getModuleTypeAccess().getGroup_0_1(), "rule__ModuleType__Group_0_1__0");
					put(grammarAccess.getModuleTypeAccess().getGroup_0_1_2(), "rule__ModuleType__Group_0_1_2__0");
					put(grammarAccess.getModuleTypeAccess().getGroup_0_1_2_2(), "rule__ModuleType__Group_0_1_2_2__0");
					put(grammarAccess.getModuleTypeAccess().getGroup_1(), "rule__ModuleType__Group_1__0");
					put(grammarAccess.getModuleTypeAccess().getGroup_1_1(), "rule__ModuleType__Group_1_1__0");
					put(grammarAccess.getModuleTypeAccess().getGroup_1_1_1(), "rule__ModuleType__Group_1_1_1__0");
					put(grammarAccess.getModuleTypeAccess().getGroup_1_1_1_2(), "rule__ModuleType__Group_1_1_1_2__0");
					put(grammarAccess.getBinaryExpressionAccess().getGroup(), "rule__BinaryExpression__Group__0");
					put(grammarAccess.getBinaryExpressionAccess().getGroup_1(), "rule__BinaryExpression__Group_1__0");
					put(grammarAccess.getNextExpressionAccess().getGroup(), "rule__NextExpression__Group__0");
					put(grammarAccess.getBracketExpressionAccess().getGroup(), "rule__BracketExpression__Group__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup(), "rule__UnaryExpression__Group__0");
					put(grammarAccess.getCaseExpressionAccess().getGroup(), "rule__CaseExpression__Group__0");
					put(grammarAccess.getCaseExpressionAccess().getGroup_1(), "rule__CaseExpression__Group_1__0");
					put(grammarAccess.getSetExpressionAccess().getGroup(), "rule__SetExpression__Group__0");
					put(grammarAccess.getSetExpressionAccess().getGroup_2(), "rule__SetExpression__Group_2__0");
					put(grammarAccess.getEAExpressionAccess().getGroup(), "rule__EAExpression__Group__0");
					put(grammarAccess.getBoolWordConvertExpressionAccess().getGroup(), "rule__BoolWordConvertExpression__Group__0");
					put(grammarAccess.getRangeAccess().getGroup(), "rule__Range__Group__0");
					put(grammarAccess.getVariableIdentifierAccess().getGroup_0(), "rule__VariableIdentifier__Group_0__0");
					put(grammarAccess.getVariableIdentifierAccess().getGroup_0_1(), "rule__VariableIdentifier__Group_0_1__0");
					put(grammarAccess.getVariableIdentifierAccess().getGroup_1(), "rule__VariableIdentifier__Group_1__0");
					put(grammarAccess.getVariableIdentifierAccess().getGroup_1_1(), "rule__VariableIdentifier__Group_1_1__0");
					put(grammarAccess.getVariableIdentifierAccess().getGroup_1_2(), "rule__VariableIdentifier__Group_1_2__0");
					put(grammarAccess.getVariableIdentifierAccess().getGroup_2(), "rule__VariableIdentifier__Group_2__0");
					put(grammarAccess.getVariableIdentifierAccess().getGroup_2_1(), "rule__VariableIdentifier__Group_2_1__0");
					put(grammarAccess.getModelAccess().getModulesAssignment(), "rule__Model__ModulesAssignment");
					put(grammarAccess.getModuleAccess().getModuleElementAssignment_2(), "rule__Module__ModuleElementAssignment_2");
					put(grammarAccess.getMainModuleAccess().getNameAssignment(), "rule__MainModule__NameAssignment");
					put(grammarAccess.getOtherModuleAccess().getNameAssignment_0(), "rule__OtherModule__NameAssignment_0");
					put(grammarAccess.getOtherModuleAccess().getParamsAssignment_1_1(), "rule__OtherModule__ParamsAssignment_1_1");
					put(grammarAccess.getOtherModuleAccess().getParamsAssignment_1_2_1(), "rule__OtherModule__ParamsAssignment_1_2_1");
					put(grammarAccess.getVariableDeclarationAccess().getVarsAssignment_1(), "rule__VariableDeclaration__VarsAssignment_1");
					put(grammarAccess.getIVariableDeclarationAccess().getVarsAssignment_1(), "rule__IVariableDeclaration__VarsAssignment_1");
					put(grammarAccess.getFrozenVariableDeclarationAccess().getVarsAssignment_1(), "rule__FrozenVariableDeclaration__VarsAssignment_1");
					put(grammarAccess.getVarBodyAccess().getVarIdAssignment_0(), "rule__VarBody__VarIdAssignment_0");
					put(grammarAccess.getVarBodyAccess().getTypeAssignment_2(), "rule__VarBody__TypeAssignment_2");
					put(grammarAccess.getDefineDeclarationAccess().getDefineBodiesAssignment_1(), "rule__DefineDeclaration__DefineBodiesAssignment_1");
					put(grammarAccess.getDefineBodyAccess().getVarIdAssignment_0(), "rule__DefineBody__VarIdAssignment_0");
					put(grammarAccess.getDefineBodyAccess().getAssignmentAssignment_2(), "rule__DefineBody__AssignmentAssignment_2");
					put(grammarAccess.getConstantsDeclarationAccess().getConstantsAssignment_1(), "rule__ConstantsDeclaration__ConstantsAssignment_1");
					put(grammarAccess.getConstantsDeclarationAccess().getConstantsAssignment_2_1(), "rule__ConstantsDeclaration__ConstantsAssignment_2_1");
					put(grammarAccess.getAssignConstraintAccess().getBodiesAssignment_1(), "rule__AssignConstraint__BodiesAssignment_1");
					put(grammarAccess.getVarBodyAssignAccess().getVarIdAssignment_0(), "rule__VarBodyAssign__VarIdAssignment_0");
					put(grammarAccess.getVarBodyAssignAccess().getAssignmentAssignment_2(), "rule__VarBodyAssign__AssignmentAssignment_2");
					put(grammarAccess.getInitBodyAccess().getVarIdAssignment_2(), "rule__InitBody__VarIdAssignment_2");
					put(grammarAccess.getInitBodyAccess().getInitExprAssignment_5(), "rule__InitBody__InitExprAssignment_5");
					put(grammarAccess.getNextBodyAccess().getVarIdAssignment_2(), "rule__NextBody__VarIdAssignment_2");
					put(grammarAccess.getNextBodyAccess().getNextExprAssignment_5(), "rule__NextBody__NextExprAssignment_5");
					put(grammarAccess.getTransConstraintAccess().getTransExprAssignment_1(), "rule__TransConstraint__TransExprAssignment_1");
					put(grammarAccess.getInitConstraintAccess().getInitExprAssignment_1(), "rule__InitConstraint__InitExprAssignment_1");
					put(grammarAccess.getInvarConstraintAccess().getInvarExprAssignment_1(), "rule__InvarConstraint__InvarExprAssignment_1");
					put(grammarAccess.getFairnessExpressionAccess().getFairnessExprAssignment_1(), "rule__FairnessExpression__FairnessExprAssignment_1");
					put(grammarAccess.getJusticeExpressionAccess().getJusticeExprAssignment_1(), "rule__JusticeExpression__JusticeExprAssignment_1");
					put(grammarAccess.getCompassionExpressionAccess().getFirstCompassionExprAssignment_1(), "rule__CompassionExpression__FirstCompassionExprAssignment_1");
					put(grammarAccess.getCompassionExpressionAccess().getSecondCompassionExprAssignment_3(), "rule__CompassionExpression__SecondCompassionExprAssignment_3");
					put(grammarAccess.getInvarSpecificationAccess().getNameAssignment_1_0(), "rule__InvarSpecification__NameAssignment_1_0");
					put(grammarAccess.getInvarSpecificationAccess().getInvarExprAssignment_2(), "rule__InvarSpecification__InvarExprAssignment_2");
					put(grammarAccess.getCtlSpecificationAccess().getNameKeyWordAssignment_1_0(), "rule__CtlSpecification__NameKeyWordAssignment_1_0");
					put(grammarAccess.getCtlSpecificationAccess().getNameAssignment_1_1(), "rule__CtlSpecification__NameAssignment_1_1");
					put(grammarAccess.getCtlSpecificationAccess().getCtlExprAssignment_2(), "rule__CtlSpecification__CtlExprAssignment_2");
					put(grammarAccess.getLtlSpecificationAccess().getNameIdAssignment_1_0(), "rule__LtlSpecification__NameIdAssignment_1_0");
					put(grammarAccess.getLtlSpecificationAccess().getNameAssignment_1_1(), "rule__LtlSpecification__NameAssignment_1_1");
					put(grammarAccess.getLtlSpecificationAccess().getLtlExprAssignment_2(), "rule__LtlSpecification__LtlExprAssignment_2");
					put(grammarAccess.getSimpleTypeAccess().getWordNumberAssignment_1_1_2(), "rule__SimpleType__WordNumberAssignment_1_1_2");
					put(grammarAccess.getSimpleTypeAccess().getUWordNumberAssignment_2_1_3(), "rule__SimpleType__UWordNumberAssignment_2_1_3");
					put(grammarAccess.getSimpleTypeAccess().getSignedNumberAssignment_3_1_2(), "rule__SimpleType__SignedNumberAssignment_3_1_2");
					put(grammarAccess.getSimpleTypeAccess().getValueAssignment_4_2(), "rule__SimpleType__ValueAssignment_4_2");
					put(grammarAccess.getSimpleTypeAccess().getValueAssignment_4_3_1(), "rule__SimpleType__ValueAssignment_4_3_1");
					put(grammarAccess.getSimpleTypeAccess().getLowAssignment_5_1(), "rule__SimpleType__LowAssignment_5_1");
					put(grammarAccess.getSimpleTypeAccess().getHighAssignment_5_3(), "rule__SimpleType__HighAssignment_5_3");
					put(grammarAccess.getSimpleTypeAccess().getBoundsAssignment_6_2(), "rule__SimpleType__BoundsAssignment_6_2");
					put(grammarAccess.getSimpleTypeAccess().getTypeAssignment_6_4(), "rule__SimpleType__TypeAssignment_6_4");
					put(grammarAccess.getModuleTypeAccess().getModuleAssignment_0_1_1(), "rule__ModuleType__ModuleAssignment_0_1_1");
					put(grammarAccess.getModuleTypeAccess().getParamsAssignment_0_1_2_1(), "rule__ModuleType__ParamsAssignment_0_1_2_1");
					put(grammarAccess.getModuleTypeAccess().getParamsAssignment_0_1_2_2_1(), "rule__ModuleType__ParamsAssignment_0_1_2_2_1");
					put(grammarAccess.getModuleTypeAccess().getModuleAssignment_1_1_0(), "rule__ModuleType__ModuleAssignment_1_1_0");
					put(grammarAccess.getModuleTypeAccess().getParamsAssignment_1_1_1_1(), "rule__ModuleType__ParamsAssignment_1_1_1_1");
					put(grammarAccess.getModuleTypeAccess().getParamsAssignment_1_1_1_2_1(), "rule__ModuleType__ParamsAssignment_1_1_1_2_1");
					put(grammarAccess.getFormalParameterAccess().getParamIdAssignment(), "rule__FormalParameter__ParamIdAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			reprotool.fm.nusmv.lang.ui.contentassist.antlr.internal.InternalNuSmvLangParser typedParser = (reprotool.fm.nusmv.lang.ui.contentassist.antlr.internal.InternalNuSmvLangParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public NuSmvLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(NuSmvLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
