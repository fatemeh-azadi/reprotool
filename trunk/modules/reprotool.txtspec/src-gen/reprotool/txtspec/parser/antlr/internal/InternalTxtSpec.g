/*
* generated by Xtext
*/
grammar InternalTxtSpec;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package reprotool.txtspec.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package reprotool.txtspec.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import reprotool.txtspec.services.TxtSpecGrammarAccess;

}

@parser::members {

 	private TxtSpecGrammarAccess grammarAccess;
 	
    public InternalTxtSpecParser(TokenStream input, TxtSpecGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Document";	
   	}
   	
   	@Override
   	protected TxtSpecGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDocument
entryRuleDocument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDocumentRule()); }
	 iv_ruleDocument=ruleDocument 
	 { $current=$iv_ruleDocument.current; } 
	 EOF 
;

// Rule Document
ruleDocument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentAccess().getBlocksBlockParserRuleCall_0()); 
	    }
		lv_blocks_0_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentRule());
	        }
       		add(
       			$current, 
       			"blocks",
        		lv_blocks_0_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlockAccess().getTextBlockParserRuleCall_0()); 
    }
    this_TextBlock_0=ruleTextBlock
    { 
        $current = $this_TextBlock_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlockAccess().getModelElementBlockParserRuleCall_1()); 
    }
    this_ModelElementBlock_1=ruleModelElementBlock
    { 
        $current = $this_ModelElementBlock_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleModelElementBlock
entryRuleModelElementBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelElementBlockRule()); }
	 iv_ruleModelElementBlock=ruleModelElementBlock 
	 { $current=$iv_ruleModelElementBlock.current; } 
	 EOF 
;

// Rule ModelElementBlock
ruleModelElementBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelElementBlockAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelElementBlockAccess().getUrlUrlParamParserRuleCall_1_0()); 
	    }
		lv_url_1_0=ruleUrlParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelElementBlockRule());
	        }
       		set(
       			$current, 
       			"url",
        		lv_url_1_0, 
        		"UrlParam");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelElementBlockAccess().getContentModelElementBlockContentParserRuleCall_2_0()); 
	    }
		lv_content_2_0=ruleModelElementBlockContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelElementBlockRule());
	        }
       		set(
       			$current, 
       			"content",
        		lv_content_2_0, 
        		"ModelElementBlockContent");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelElementBlockAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleModelElementBlockContent
entryRuleModelElementBlockContent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelElementBlockContentRule()); }
	 iv_ruleModelElementBlockContent=ruleModelElementBlockContent 
	 { $current=$iv_ruleModelElementBlockContent.current; } 
	 EOF 
;

// Rule ModelElementBlockContent
ruleModelElementBlockContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelElementBlockContentAccess().getModelElementBlockContentAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelElementBlockContentAccess().getBlocksBlockParserRuleCall_1_0()); 
	    }
		lv_blocks_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelElementBlockContentRule());
	        }
       		add(
       			$current, 
       			"blocks",
        		lv_blocks_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleUrlParam
entryRuleUrlParam returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUrlParamRule()); } 
	 iv_ruleUrlParam=ruleUrlParam 
	 { $current=$iv_ruleUrlParam.current.getText(); }  
	 EOF 
;

// Rule UrlParam
ruleUrlParam returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_WORD_0=RULE_WORD    {
		$current.merge(this_WORD_0);
    }

    { 
    newLeafNode(this_WORD_0, grammarAccess.getUrlParamAccess().getWORDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleTextBlock
entryRuleTextBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextBlockRule()); }
	 iv_ruleTextBlock=ruleTextBlock 
	 { $current=$iv_ruleTextBlock.current; } 
	 EOF 
;

// Rule TextBlock
ruleTextBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
RULE_WORD

)
)=>
(
		lv_words_0_0=RULE_WORD
		{
			newLeafNode(lv_words_0_0, grammarAccess.getTextBlockAccess().getWordsWORDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextBlockRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"words",
        		lv_words_0_0, 
        		"WORD");
	    }

)
)+
;





RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_WORD : ('a'..'z'|'A'..'Z'|'0'..'9'|','|'@'|'.'|'&'|':'|'/'|'?'|'%'|';'|'-')+;


