/*
* generated by Xtext
*/
grammar InternalTxtSpec;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package reprotool.txtspec.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package reprotool.txtspec.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import reprotool.txtspec.services.TxtSpecGrammarAccess;

}

@parser::members {
 
 	private TxtSpecGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TxtSpecGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDocument
entryRuleDocument 
:
{ before(grammarAccess.getDocumentRule()); }
	 ruleDocument
{ after(grammarAccess.getDocumentRule()); } 
	 EOF 
;

// Rule Document
ruleDocument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDocumentAccess().getBlocksAssignment()); }
(rule__Document__BlocksAssignment)*
{ after(grammarAccess.getDocumentAccess().getBlocksAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getAlternatives()); }
(rule__Block__Alternatives)
{ after(grammarAccess.getBlockAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModelElementBlock
entryRuleModelElementBlock 
:
{ before(grammarAccess.getModelElementBlockRule()); }
	 ruleModelElementBlock
{ after(grammarAccess.getModelElementBlockRule()); } 
	 EOF 
;

// Rule ModelElementBlock
ruleModelElementBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelElementBlockAccess().getGroup()); }
(rule__ModelElementBlock__Group__0)
{ after(grammarAccess.getModelElementBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModelElementBlockContent
entryRuleModelElementBlockContent 
:
{ before(grammarAccess.getModelElementBlockContentRule()); }
	 ruleModelElementBlockContent
{ after(grammarAccess.getModelElementBlockContentRule()); } 
	 EOF 
;

// Rule ModelElementBlockContent
ruleModelElementBlockContent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelElementBlockContentAccess().getGroup()); }
(rule__ModelElementBlockContent__Group__0)
{ after(grammarAccess.getModelElementBlockContentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUrlParam
entryRuleUrlParam 
:
{ before(grammarAccess.getUrlParamRule()); }
	 ruleUrlParam
{ after(grammarAccess.getUrlParamRule()); } 
	 EOF 
;

// Rule UrlParam
ruleUrlParam
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUrlParamAccess().getWORDTerminalRuleCall()); }
	RULE_WORD
{ after(grammarAccess.getUrlParamAccess().getWORDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTextBlock
entryRuleTextBlock 
:
{ before(grammarAccess.getTextBlockRule()); }
	 ruleTextBlock
{ after(grammarAccess.getTextBlockRule()); } 
	 EOF 
;

// Rule TextBlock
ruleTextBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getTextBlockAccess().getWordsAssignment()); }
(rule__TextBlock__WordsAssignment)
{ after(grammarAccess.getTextBlockAccess().getWordsAssignment()); }
)
(
{ before(grammarAccess.getTextBlockAccess().getWordsAssignment()); }
(rule__TextBlock__WordsAssignment)*
{ after(grammarAccess.getTextBlockAccess().getWordsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Block__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getTextBlockParserRuleCall_0()); }
	ruleTextBlock
{ after(grammarAccess.getBlockAccess().getTextBlockParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBlockAccess().getModelElementBlockParserRuleCall_1()); }
	ruleModelElementBlock
{ after(grammarAccess.getBlockAccess().getModelElementBlockParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ModelElementBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelElementBlock__Group__0__Impl
	rule__ModelElementBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElementBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelElementBlockAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getModelElementBlockAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelElementBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelElementBlock__Group__1__Impl
	rule__ModelElementBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElementBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelElementBlockAccess().getUrlAssignment_1()); }
(rule__ModelElementBlock__UrlAssignment_1)
{ after(grammarAccess.getModelElementBlockAccess().getUrlAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelElementBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelElementBlock__Group__2__Impl
	rule__ModelElementBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElementBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelElementBlockAccess().getContentAssignment_2()); }
(rule__ModelElementBlock__ContentAssignment_2)
{ after(grammarAccess.getModelElementBlockAccess().getContentAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelElementBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelElementBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElementBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelElementBlockAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getModelElementBlockAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ModelElementBlockContent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelElementBlockContent__Group__0__Impl
	rule__ModelElementBlockContent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElementBlockContent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelElementBlockContentAccess().getModelElementBlockContentAction_0()); }
(

)
{ after(grammarAccess.getModelElementBlockContentAccess().getModelElementBlockContentAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelElementBlockContent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelElementBlockContent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElementBlockContent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelElementBlockContentAccess().getBlocksAssignment_1()); }
(rule__ModelElementBlockContent__BlocksAssignment_1)*
{ after(grammarAccess.getModelElementBlockContentAccess().getBlocksAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Document__BlocksAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDocumentAccess().getBlocksBlockParserRuleCall_0()); }
	ruleBlock{ after(grammarAccess.getDocumentAccess().getBlocksBlockParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElementBlock__UrlAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelElementBlockAccess().getUrlUrlParamParserRuleCall_1_0()); }
	ruleUrlParam{ after(grammarAccess.getModelElementBlockAccess().getUrlUrlParamParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElementBlock__ContentAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelElementBlockAccess().getContentModelElementBlockContentParserRuleCall_2_0()); }
	ruleModelElementBlockContent{ after(grammarAccess.getModelElementBlockAccess().getContentModelElementBlockContentParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelElementBlockContent__BlocksAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelElementBlockContentAccess().getBlocksBlockParserRuleCall_1_0()); }
	ruleBlock{ after(grammarAccess.getModelElementBlockContentAccess().getBlocksBlockParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TextBlock__WordsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTextBlockAccess().getWordsWORDTerminalRuleCall_0()); }
	RULE_WORD{ after(grammarAccess.getTextBlockAccess().getWordsWORDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_WORD : ('a'..'z'|'A'..'Z'|'0'..'9'|','|'@'|'.'|'&'|':'|'/'|'?'|'%'|';'|'-')+;


