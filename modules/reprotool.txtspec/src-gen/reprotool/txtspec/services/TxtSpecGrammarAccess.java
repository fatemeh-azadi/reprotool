/*
* generated by Xtext
*/

package reprotool.txtspec.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class TxtSpecGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Document");
		private final Assignment cBlocksAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlocksBlockParserRuleCall_0 = (RuleCall)cBlocksAssignment.eContents().get(0);
		
		//Document:
		//	blocks+=Block*;
		public ParserRule getRule() { return rule; }

		//blocks+=Block*
		public Assignment getBlocksAssignment() { return cBlocksAssignment; }

		//Block
		public RuleCall getBlocksBlockParserRuleCall_0() { return cBlocksBlockParserRuleCall_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelElementBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Block:
		//	TextBlock | ModelElementBlock;
		public ParserRule getRule() { return rule; }

		//TextBlock | ModelElementBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//TextBlock
		public RuleCall getTextBlockParserRuleCall_0() { return cTextBlockParserRuleCall_0; }

		//ModelElementBlock
		public RuleCall getModelElementBlockParserRuleCall_1() { return cModelElementBlockParserRuleCall_1; }
	}

	public class ModelElementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelElementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlUrlParamParserRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentModelElementBlockContentParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ModelElementBlock:
		//	"(" url=UrlParam content=ModelElementBlockContent ")";
		public ParserRule getRule() { return rule; }

		//"(" url=UrlParam content=ModelElementBlockContent ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//url=UrlParam
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }

		//UrlParam
		public RuleCall getUrlUrlParamParserRuleCall_1_0() { return cUrlUrlParamParserRuleCall_1_0; }

		//content=ModelElementBlockContent
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }

		//ModelElementBlockContent
		public RuleCall getContentModelElementBlockContentParserRuleCall_2_0() { return cContentModelElementBlockContentParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ModelElementBlockContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelElementBlockContent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelElementBlockContentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cBlocksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlocksBlockParserRuleCall_1_0 = (RuleCall)cBlocksAssignment_1.eContents().get(0);
		
		//// we need this because of indentation
		//ModelElementBlockContent:
		//	{ModelElementBlockContent} blocks+=Block*;
		public ParserRule getRule() { return rule; }

		//{ModelElementBlockContent} blocks+=Block*
		public Group getGroup() { return cGroup; }

		//{ModelElementBlockContent}
		public Action getModelElementBlockContentAction_0() { return cModelElementBlockContentAction_0; }

		//blocks+=Block*
		public Assignment getBlocksAssignment_1() { return cBlocksAssignment_1; }

		//Block
		public RuleCall getBlocksBlockParserRuleCall_1_0() { return cBlocksBlockParserRuleCall_1_0; }
	}

	public class UrlParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UrlParam");
		private final RuleCall cWORDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UrlParam:
		//	WORD;
		public ParserRule getRule() { return rule; }

		//WORD
		public RuleCall getWORDTerminalRuleCall() { return cWORDTerminalRuleCall; }
	}

	public class TextBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextBlock");
		private final Assignment cWordsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cWordsWORDTerminalRuleCall_0 = (RuleCall)cWordsAssignment.eContents().get(0);
		
		//TextBlock:
		//	=> words+=WORD+;
		public ParserRule getRule() { return rule; }

		//=> words+=WORD+
		public Assignment getWordsAssignment() { return cWordsAssignment; }

		//WORD
		public RuleCall getWordsWORDTerminalRuleCall_0() { return cWordsWORDTerminalRuleCall_0; }
	}
	
	
	private DocumentElements pDocument;
	private BlockElements pBlock;
	private ModelElementBlockElements pModelElementBlock;
	private ModelElementBlockContentElements pModelElementBlockContent;
	private UrlParamElements pUrlParam;
	private TextBlockElements pTextBlock;
	private TerminalRule tWS;
	private TerminalRule tWORD;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public TxtSpecGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Document:
	//	blocks+=Block*;
	public DocumentElements getDocumentAccess() {
		return (pDocument != null) ? pDocument : (pDocument = new DocumentElements());
	}
	
	public ParserRule getDocumentRule() {
		return getDocumentAccess().getRule();
	}

	//Block:
	//	TextBlock | ModelElementBlock;
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//ModelElementBlock:
	//	"(" url=UrlParam content=ModelElementBlockContent ")";
	public ModelElementBlockElements getModelElementBlockAccess() {
		return (pModelElementBlock != null) ? pModelElementBlock : (pModelElementBlock = new ModelElementBlockElements());
	}
	
	public ParserRule getModelElementBlockRule() {
		return getModelElementBlockAccess().getRule();
	}

	//// we need this because of indentation
	//ModelElementBlockContent:
	//	{ModelElementBlockContent} blocks+=Block*;
	public ModelElementBlockContentElements getModelElementBlockContentAccess() {
		return (pModelElementBlockContent != null) ? pModelElementBlockContent : (pModelElementBlockContent = new ModelElementBlockContentElements());
	}
	
	public ParserRule getModelElementBlockContentRule() {
		return getModelElementBlockContentAccess().getRule();
	}

	//UrlParam:
	//	WORD;
	public UrlParamElements getUrlParamAccess() {
		return (pUrlParam != null) ? pUrlParam : (pUrlParam = new UrlParamElements());
	}
	
	public ParserRule getUrlParamRule() {
		return getUrlParamAccess().getRule();
	}

	//TextBlock:
	//	=> words+=WORD+;
	public TextBlockElements getTextBlockAccess() {
		return (pTextBlock != null) ? pTextBlock : (pTextBlock = new TextBlockElements());
	}
	
	public ParserRule getTextBlockRule() {
		return getTextBlockAccess().getRule();
	}

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal WORD:
	//	("a".."z" | "A".."Z" | "0".."9" | "," | "@" | "." | "&" | ":" | "/" | "?" | "%" | ";" | "-")+;
	public TerminalRule getWORDRule() {
		return (tWORD != null) ? tWORD : (tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WORD"));
	} 
}
