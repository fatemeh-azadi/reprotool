/*
* generated by Xtext
*/

package reprotool.fm.nusmv.lang.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class NuSmvLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cModulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModulesModuleParserRuleCall_0 = (RuleCall)cModulesAssignment.eContents().get(0);
		
		//Model hidden(WS, SL_COMMENT):
		//	modules+=Module*;
		public ParserRule getRule() { return rule; }

		//modules+=Module*
		public Assignment getModulesAssignment() { return cModulesAssignment; }

		//Module
		public RuleCall getModulesModuleParserRuleCall_0() { return cModulesModuleParserRuleCall_0; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMODULEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cMainModuleParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cOtherModuleParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Assignment cModuleElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModuleElementModuleElementParserRuleCall_2_0 = (RuleCall)cModuleElementAssignment_2.eContents().get(0);
		
		//Module:
		//	"MODULE" (MainModule | OtherModule) moduleElement+=ModuleElement*;
		public ParserRule getRule() { return rule; }

		//"MODULE" (MainModule | OtherModule) moduleElement+=ModuleElement*
		public Group getGroup() { return cGroup; }

		//"MODULE"
		public Keyword getMODULEKeyword_0() { return cMODULEKeyword_0; }

		//MainModule | OtherModule
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//MainModule
		public RuleCall getMainModuleParserRuleCall_1_0() { return cMainModuleParserRuleCall_1_0; }

		//OtherModule
		public RuleCall getOtherModuleParserRuleCall_1_1() { return cOtherModuleParserRuleCall_1_1; }

		//moduleElement+=ModuleElement*
		public Assignment getModuleElementAssignment_2() { return cModuleElementAssignment_2; }

		//ModuleElement
		public RuleCall getModuleElementModuleElementParserRuleCall_2_0() { return cModuleElementModuleElementParserRuleCall_2_0; }
	}

	public class MainModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainModule");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameMainKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//MainModule:
		//	name="main";
		public ParserRule getRule() { return rule; }

		//name="main"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"main"
		public Keyword getNameMainKeyword_0() { return cNameMainKeyword_0; }
	}

	public class OtherModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsFormalParameterParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParamsFormalParameterParserRuleCall_1_2_1_0 = (RuleCall)cParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//OtherModule:
		//	name=ID ("(" params+=FormalParameter ("," params+=FormalParameter)* ")")?;
		public ParserRule getRule() { return rule; }

		//name=ID ("(" params+=FormalParameter ("," params+=FormalParameter)* ")")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("(" params+=FormalParameter ("," params+=FormalParameter)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//params+=FormalParameter
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_1_1_0() { return cParamsFormalParameterParserRuleCall_1_1_0; }

		//("," params+=FormalParameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//params+=FormalParameter
		public Assignment getParamsAssignment_1_2_1() { return cParamsAssignment_1_2_1; }

		//FormalParameter
		public RuleCall getParamsFormalParameterParserRuleCall_1_2_1_0() { return cParamsFormalParameterParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class ModuleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFrozenVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefineDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstantsDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAssignConstraintParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTransConstraintParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInitConstraintParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cInvarConstraintParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cFairnessConstraintParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cCtlSpecificationParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLtlSpecificationParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cInvarSpecificationParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		////| IsaDeclaration
		//ModuleElement hidden(WS, SL_COMMENT):
		//	VariableDeclaration | IVariableDeclaration | FrozenVariableDeclaration | DefineDeclaration | ConstantsDeclaration |
		//	AssignConstraint | TransConstraint | InitConstraint | InvarConstraint | FairnessConstraint | CtlSpecification |
		//	LtlSpecification | InvarSpecification;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration | IVariableDeclaration | FrozenVariableDeclaration | DefineDeclaration | ConstantsDeclaration |
		//AssignConstraint | TransConstraint | InitConstraint | InvarConstraint | FairnessConstraint | CtlSpecification |
		//LtlSpecification | InvarSpecification
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }

		//IVariableDeclaration
		public RuleCall getIVariableDeclarationParserRuleCall_1() { return cIVariableDeclarationParserRuleCall_1; }

		//FrozenVariableDeclaration
		public RuleCall getFrozenVariableDeclarationParserRuleCall_2() { return cFrozenVariableDeclarationParserRuleCall_2; }

		//DefineDeclaration
		public RuleCall getDefineDeclarationParserRuleCall_3() { return cDefineDeclarationParserRuleCall_3; }

		//ConstantsDeclaration
		public RuleCall getConstantsDeclarationParserRuleCall_4() { return cConstantsDeclarationParserRuleCall_4; }

		//AssignConstraint
		public RuleCall getAssignConstraintParserRuleCall_5() { return cAssignConstraintParserRuleCall_5; }

		//TransConstraint
		public RuleCall getTransConstraintParserRuleCall_6() { return cTransConstraintParserRuleCall_6; }

		//InitConstraint
		public RuleCall getInitConstraintParserRuleCall_7() { return cInitConstraintParserRuleCall_7; }

		//InvarConstraint
		public RuleCall getInvarConstraintParserRuleCall_8() { return cInvarConstraintParserRuleCall_8; }

		//FairnessConstraint
		public RuleCall getFairnessConstraintParserRuleCall_9() { return cFairnessConstraintParserRuleCall_9; }

		//CtlSpecification
		public RuleCall getCtlSpecificationParserRuleCall_10() { return cCtlSpecificationParserRuleCall_10; }

		//LtlSpecification
		public RuleCall getLtlSpecificationParserRuleCall_11() { return cLtlSpecificationParserRuleCall_11; }

		//InvarSpecification
		public RuleCall getInvarSpecificationParserRuleCall_12() { return cInvarSpecificationParserRuleCall_12; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsVarBodyParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		
		//// ISA is deprecated in NuSMV 2.5
		////IsaDeclaration hidden(WS, SL_COMMENT):
		////	"ISA" id=ID;
		//VariableDeclaration hidden(WS, SL_COMMENT):
		//	"VAR" vars+=VarBody+;
		public ParserRule getRule() { return rule; }

		//"VAR" vars+=VarBody+
		public Group getGroup() { return cGroup; }

		//"VAR"
		public Keyword getVARKeyword_0() { return cVARKeyword_0; }

		//vars+=VarBody+
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }

		//VarBody
		public RuleCall getVarsVarBodyParserRuleCall_1_0() { return cVarsVarBodyParserRuleCall_1_0; }
	}

	public class IVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsVarBodyParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		
		//IVariableDeclaration hidden(WS, SL_COMMENT):
		//	"IVAR" vars+=VarBody+;
		public ParserRule getRule() { return rule; }

		//"IVAR" vars+=VarBody+
		public Group getGroup() { return cGroup; }

		//"IVAR"
		public Keyword getIVARKeyword_0() { return cIVARKeyword_0; }

		//vars+=VarBody+
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }

		//VarBody
		public RuleCall getVarsVarBodyParserRuleCall_1_0() { return cVarsVarBodyParserRuleCall_1_0; }
	}

	public class FrozenVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FrozenVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROZENVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsVarBodyParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		
		//FrozenVariableDeclaration hidden(WS, SL_COMMENT):
		//	"FROZENVAR" vars+=VarBody+;
		public ParserRule getRule() { return rule; }

		//"FROZENVAR" vars+=VarBody+
		public Group getGroup() { return cGroup; }

		//"FROZENVAR"
		public Keyword getFROZENVARKeyword_0() { return cFROZENVARKeyword_0; }

		//vars+=VarBody+
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }

		//VarBody
		public RuleCall getVarsVarBodyParserRuleCall_1_0() { return cVarsVarBodyParserRuleCall_1_0; }
	}

	public class VarBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarIdIDTerminalRuleCall_0_0 = (RuleCall)cVarIdAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeSpecifierParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VarBody hidden(WS, SL_COMMENT):
		//	varId=ID ":" type=TypeSpecifier ";";
		public ParserRule getRule() { return rule; }

		//varId=ID ":" type=TypeSpecifier ";"
		public Group getGroup() { return cGroup; }

		//varId=ID
		public Assignment getVarIdAssignment_0() { return cVarIdAssignment_0; }

		//ID
		public RuleCall getVarIdIDTerminalRuleCall_0_0() { return cVarIdIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=TypeSpecifier
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeSpecifier
		public RuleCall getTypeTypeSpecifierParserRuleCall_2_0() { return cTypeTypeSpecifierParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DefineDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefineDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFINEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefineBodiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefineBodiesDefineBodyParserRuleCall_1_0 = (RuleCall)cDefineBodiesAssignment_1.eContents().get(0);
		
		//DefineDeclaration hidden(WS, SL_COMMENT):
		//	"DEFINE" defineBodies+=DefineBody+;
		public ParserRule getRule() { return rule; }

		//"DEFINE" defineBodies+=DefineBody+
		public Group getGroup() { return cGroup; }

		//"DEFINE"
		public Keyword getDEFINEKeyword_0() { return cDEFINEKeyword_0; }

		//defineBodies+=DefineBody+
		public Assignment getDefineBodiesAssignment_1() { return cDefineBodiesAssignment_1; }

		//DefineBody
		public RuleCall getDefineBodiesDefineBodyParserRuleCall_1_0() { return cDefineBodiesDefineBodyParserRuleCall_1_0; }
	}

	public class DefineBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefineBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarIdIDTerminalRuleCall_0_0 = (RuleCall)cVarIdAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentSimpleExpressionParserRuleCall_2_0 = (RuleCall)cAssignmentAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DefineBody hidden(WS, SL_COMMENT):
		//	varId=ID ":=" assignment=SimpleExpression ";";
		public ParserRule getRule() { return rule; }

		//varId=ID ":=" assignment=SimpleExpression ";"
		public Group getGroup() { return cGroup; }

		//varId=ID
		public Assignment getVarIdAssignment_0() { return cVarIdAssignment_0; }

		//ID
		public RuleCall getVarIdIDTerminalRuleCall_0_0() { return cVarIdIDTerminalRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//assignment=SimpleExpression
		public Assignment getAssignmentAssignment_2() { return cAssignmentAssignment_2; }

		//SimpleExpression
		public RuleCall getAssignmentSimpleExpressionParserRuleCall_2_0() { return cAssignmentSimpleExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ConstantsDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantsDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONSTANTSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstantsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstantsIDTerminalRuleCall_1_0 = (RuleCall)cConstantsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstantsIDTerminalRuleCall_2_1_0 = (RuleCall)cConstantsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstantsDeclaration hidden(WS, SL_COMMENT):
		//	"CONSTANTS" constants+=ID ("," constants+=ID)* ";";
		public ParserRule getRule() { return rule; }

		//"CONSTANTS" constants+=ID ("," constants+=ID)* ";"
		public Group getGroup() { return cGroup; }

		//"CONSTANTS"
		public Keyword getCONSTANTSKeyword_0() { return cCONSTANTSKeyword_0; }

		//constants+=ID
		public Assignment getConstantsAssignment_1() { return cConstantsAssignment_1; }

		//ID
		public RuleCall getConstantsIDTerminalRuleCall_1_0() { return cConstantsIDTerminalRuleCall_1_0; }

		//("," constants+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//constants+=ID
		public Assignment getConstantsAssignment_2_1() { return cConstantsAssignment_2_1; }

		//ID
		public RuleCall getConstantsIDTerminalRuleCall_2_1_0() { return cConstantsIDTerminalRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AssignConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cASSIGNKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodiesAssignBodyParserRuleCall_1_0 = (RuleCall)cBodiesAssignment_1.eContents().get(0);
		
		//AssignConstraint hidden(WS, SL_COMMENT):
		//	"ASSIGN" bodies+=AssignBody+;
		public ParserRule getRule() { return rule; }

		//"ASSIGN" bodies+=AssignBody+
		public Group getGroup() { return cGroup; }

		//"ASSIGN"
		public Keyword getASSIGNKeyword_0() { return cASSIGNKeyword_0; }

		//bodies+=AssignBody+
		public Assignment getBodiesAssignment_1() { return cBodiesAssignment_1; }

		//AssignBody
		public RuleCall getBodiesAssignBodyParserRuleCall_1_0() { return cBodiesAssignBodyParserRuleCall_1_0; }
	}

	public class AssignBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarBodyAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitBodyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNextBodyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AssignBody hidden(WS, SL_COMMENT):
		//	VarBodyAssign | InitBody | NextBody;
		public ParserRule getRule() { return rule; }

		//VarBodyAssign | InitBody | NextBody
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarBodyAssign
		public RuleCall getVarBodyAssignParserRuleCall_0() { return cVarBodyAssignParserRuleCall_0; }

		//InitBody
		public RuleCall getInitBodyParserRuleCall_1() { return cInitBodyParserRuleCall_1; }

		//NextBody
		public RuleCall getNextBodyParserRuleCall_2() { return cNextBodyParserRuleCall_2; }
	}

	public class VarBodyAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarBodyAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarIdVariableIdentifierParserRuleCall_0_0 = (RuleCall)cVarIdAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentSimpleExpressionParserRuleCall_2_0 = (RuleCall)cAssignmentAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VarBodyAssign hidden(WS, SL_COMMENT):
		//	varId=VariableIdentifier ":=" assignment=SimpleExpression ";";
		public ParserRule getRule() { return rule; }

		//varId=VariableIdentifier ":=" assignment=SimpleExpression ";"
		public Group getGroup() { return cGroup; }

		//varId=VariableIdentifier
		public Assignment getVarIdAssignment_0() { return cVarIdAssignment_0; }

		//VariableIdentifier
		public RuleCall getVarIdVariableIdentifierParserRuleCall_0_0() { return cVarIdVariableIdentifierParserRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//assignment=SimpleExpression
		public Assignment getAssignmentAssignment_2() { return cAssignmentAssignment_2; }

		//SimpleExpression
		public RuleCall getAssignmentSimpleExpressionParserRuleCall_2_0() { return cAssignmentSimpleExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class InitBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIdVariableIdentifierParserRuleCall_2_0 = (RuleCall)cVarIdAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInitExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInitExprSimpleExpressionParserRuleCall_5_0 = (RuleCall)cInitExprAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InitBody hidden(WS, SL_COMMENT):
		//	"init" "(" varId=VariableIdentifier ")" ":=" initExpr=SimpleExpression ";";
		public ParserRule getRule() { return rule; }

		//"init" "(" varId=VariableIdentifier ")" ":=" initExpr=SimpleExpression ";"
		public Group getGroup() { return cGroup; }

		//"init"
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//varId=VariableIdentifier
		public Assignment getVarIdAssignment_2() { return cVarIdAssignment_2; }

		//VariableIdentifier
		public RuleCall getVarIdVariableIdentifierParserRuleCall_2_0() { return cVarIdVariableIdentifierParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//":="
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }

		//initExpr=SimpleExpression
		public Assignment getInitExprAssignment_5() { return cInitExprAssignment_5; }

		//SimpleExpression
		public RuleCall getInitExprSimpleExpressionParserRuleCall_5_0() { return cInitExprSimpleExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class NextBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NextBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIdVariableIdentifierParserRuleCall_2_0 = (RuleCall)cVarIdAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNextExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNextExprSimpleExpressionParserRuleCall_5_0 = (RuleCall)cNextExprAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NextBody hidden(WS, SL_COMMENT):
		//	"next" "(" varId=VariableIdentifier ")" ":=" nextExpr=SimpleExpression ";";
		public ParserRule getRule() { return rule; }

		//"next" "(" varId=VariableIdentifier ")" ":=" nextExpr=SimpleExpression ";"
		public Group getGroup() { return cGroup; }

		//"next"
		public Keyword getNextKeyword_0() { return cNextKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//varId=VariableIdentifier
		public Assignment getVarIdAssignment_2() { return cVarIdAssignment_2; }

		//VariableIdentifier
		public RuleCall getVarIdVariableIdentifierParserRuleCall_2_0() { return cVarIdVariableIdentifierParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//":="
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }

		//nextExpr=SimpleExpression
		public Assignment getNextExprAssignment_5() { return cNextExprAssignment_5; }

		//SimpleExpression
		public RuleCall getNextExprSimpleExpressionParserRuleCall_5_0() { return cNextExprSimpleExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class TransConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTRANSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransExprSimpleExpressionParserRuleCall_1_0 = (RuleCall)cTransExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TransConstraint hidden(WS, SL_COMMENT):
		//	"TRANS" transExpr=SimpleExpression ";"?;
		public ParserRule getRule() { return rule; }

		//"TRANS" transExpr=SimpleExpression ";"?
		public Group getGroup() { return cGroup; }

		//"TRANS"
		public Keyword getTRANSKeyword_0() { return cTRANSKeyword_0; }

		//transExpr=SimpleExpression
		public Assignment getTransExprAssignment_1() { return cTransExprAssignment_1; }

		//SimpleExpression
		public RuleCall getTransExprSimpleExpressionParserRuleCall_1_0() { return cTransExprSimpleExpressionParserRuleCall_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class InitConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINITKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitExprSimpleExpressionParserRuleCall_1_0 = (RuleCall)cInitExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InitConstraint hidden(WS, SL_COMMENT):
		//	"INIT" initExpr=SimpleExpression ";"?;
		public ParserRule getRule() { return rule; }

		//"INIT" initExpr=SimpleExpression ";"?
		public Group getGroup() { return cGroup; }

		//"INIT"
		public Keyword getINITKeyword_0() { return cINITKeyword_0; }

		//initExpr=SimpleExpression
		public Assignment getInitExprAssignment_1() { return cInitExprAssignment_1; }

		//SimpleExpression
		public RuleCall getInitExprSimpleExpressionParserRuleCall_1_0() { return cInitExprSimpleExpressionParserRuleCall_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class InvarConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvarConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInvarExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInvarExprSimpleExpressionParserRuleCall_1_0 = (RuleCall)cInvarExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InvarConstraint hidden(WS, SL_COMMENT):
		//	"INVAR" invarExpr=SimpleExpression ";"?;
		public ParserRule getRule() { return rule; }

		//"INVAR" invarExpr=SimpleExpression ";"?
		public Group getGroup() { return cGroup; }

		//"INVAR"
		public Keyword getINVARKeyword_0() { return cINVARKeyword_0; }

		//invarExpr=SimpleExpression
		public Assignment getInvarExprAssignment_1() { return cInvarExprAssignment_1; }

		//SimpleExpression
		public RuleCall getInvarExprSimpleExpressionParserRuleCall_1_0() { return cInvarExprSimpleExpressionParserRuleCall_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class FairnessConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FairnessConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFairnessExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJusticeExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompassionExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FairnessConstraint hidden(WS, SL_COMMENT):
		//	FairnessExpression | JusticeExpression | CompassionExpression;
		public ParserRule getRule() { return rule; }

		//FairnessExpression | JusticeExpression | CompassionExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//FairnessExpression
		public RuleCall getFairnessExpressionParserRuleCall_0() { return cFairnessExpressionParserRuleCall_0; }

		//JusticeExpression
		public RuleCall getJusticeExpressionParserRuleCall_1() { return cJusticeExpressionParserRuleCall_1; }

		//CompassionExpression
		public RuleCall getCompassionExpressionParserRuleCall_2() { return cCompassionExpressionParserRuleCall_2; }
	}

	public class FairnessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FairnessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFAIRNESSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFairnessExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFairnessExprSimpleExpressionParserRuleCall_1_0 = (RuleCall)cFairnessExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FairnessExpression hidden(WS, SL_COMMENT):
		//	"FAIRNESS" fairnessExpr=SimpleExpression ";"?;
		public ParserRule getRule() { return rule; }

		//"FAIRNESS" fairnessExpr=SimpleExpression ";"?
		public Group getGroup() { return cGroup; }

		//"FAIRNESS"
		public Keyword getFAIRNESSKeyword_0() { return cFAIRNESSKeyword_0; }

		//fairnessExpr=SimpleExpression
		public Assignment getFairnessExprAssignment_1() { return cFairnessExprAssignment_1; }

		//SimpleExpression
		public RuleCall getFairnessExprSimpleExpressionParserRuleCall_1_0() { return cFairnessExprSimpleExpressionParserRuleCall_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class JusticeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JusticeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJUSTICEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cJusticeExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJusticeExprSimpleExpressionParserRuleCall_1_0 = (RuleCall)cJusticeExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//JusticeExpression hidden(WS, SL_COMMENT):
		//	"JUSTICE" justiceExpr=SimpleExpression ";"?;
		public ParserRule getRule() { return rule; }

		//"JUSTICE" justiceExpr=SimpleExpression ";"?
		public Group getGroup() { return cGroup; }

		//"JUSTICE"
		public Keyword getJUSTICEKeyword_0() { return cJUSTICEKeyword_0; }

		//justiceExpr=SimpleExpression
		public Assignment getJusticeExprAssignment_1() { return cJusticeExprAssignment_1; }

		//SimpleExpression
		public RuleCall getJusticeExprSimpleExpressionParserRuleCall_1_0() { return cJusticeExprSimpleExpressionParserRuleCall_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class CompassionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompassionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCOMPASSIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstCompassionExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstCompassionExprSimpleExpressionParserRuleCall_1_0 = (RuleCall)cFirstCompassionExprAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondCompassionExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondCompassionExprSimpleExpressionParserRuleCall_3_0 = (RuleCall)cSecondCompassionExprAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CompassionExpression hidden(WS, SL_COMMENT):
		//	"COMPASSION (" firstCompassionExpr=SimpleExpression "," secondCompassionExpr=SimpleExpression ")" ";"?;
		public ParserRule getRule() { return rule; }

		//"COMPASSION (" firstCompassionExpr=SimpleExpression "," secondCompassionExpr=SimpleExpression ")" ";"?
		public Group getGroup() { return cGroup; }

		//"COMPASSION ("
		public Keyword getCOMPASSIONKeyword_0() { return cCOMPASSIONKeyword_0; }

		//firstCompassionExpr=SimpleExpression
		public Assignment getFirstCompassionExprAssignment_1() { return cFirstCompassionExprAssignment_1; }

		//SimpleExpression
		public RuleCall getFirstCompassionExprSimpleExpressionParserRuleCall_1_0() { return cFirstCompassionExprSimpleExpressionParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//secondCompassionExpr=SimpleExpression
		public Assignment getSecondCompassionExprAssignment_3() { return cSecondCompassionExprAssignment_3; }

		//SimpleExpression
		public RuleCall getSecondCompassionExprSimpleExpressionParserRuleCall_3_0() { return cSecondCompassionExprSimpleExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class InvarSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvarSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINVARSPECKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cInvarExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInvarExprSimpleExpressionParserRuleCall_2_0 = (RuleCall)cInvarExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InvarSpecification hidden(WS, SL_COMMENT):
		//	"INVARSPEC" (name=ID ":=")? invarExpr=SimpleExpression ";"?;
		public ParserRule getRule() { return rule; }

		//"INVARSPEC" (name=ID ":=")? invarExpr=SimpleExpression ";"?
		public Group getGroup() { return cGroup; }

		//"INVARSPEC"
		public Keyword getINVARSPECKeyword_0() { return cINVARSPECKeyword_0; }

		//(name=ID ":=")?
		public Group getGroup_1() { return cGroup_1; }

		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }

		//invarExpr=SimpleExpression
		public Assignment getInvarExprAssignment_2() { return cInvarExprAssignment_2; }

		//SimpleExpression
		public RuleCall getInvarExprSimpleExpressionParserRuleCall_2_0() { return cInvarExprSimpleExpressionParserRuleCall_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class CtlSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CtlSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCTLSPECKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cSPECKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameKeyWordAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameKeyWordNAMEKeyword_1_0_0 = (Keyword)cNameKeyWordAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCtlExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCtlExprSimpleExpressionParserRuleCall_2_0 = (RuleCall)cCtlExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CtlSpecification hidden(WS, SL_COMMENT):
		//	("CTLSPEC" | "SPEC") (nameKeyWord?="NAME" name=ID ":=")? ctlExpr=SimpleExpression ";"?;
		public ParserRule getRule() { return rule; }

		//("CTLSPEC" | "SPEC") (nameKeyWord?="NAME" name=ID ":=")? ctlExpr=SimpleExpression ";"?
		public Group getGroup() { return cGroup; }

		//"CTLSPEC" | "SPEC"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"CTLSPEC"
		public Keyword getCTLSPECKeyword_0_0() { return cCTLSPECKeyword_0_0; }

		//"SPEC"
		public Keyword getSPECKeyword_0_1() { return cSPECKeyword_0_1; }

		//(nameKeyWord?="NAME" name=ID ":=")?
		public Group getGroup_1() { return cGroup_1; }

		//nameKeyWord?="NAME"
		public Assignment getNameKeyWordAssignment_1_0() { return cNameKeyWordAssignment_1_0; }

		//"NAME"
		public Keyword getNameKeyWordNAMEKeyword_1_0_0() { return cNameKeyWordNAMEKeyword_1_0_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_2() { return cColonEqualsSignKeyword_1_2; }

		//ctlExpr=SimpleExpression
		public Assignment getCtlExprAssignment_2() { return cCtlExprAssignment_2; }

		//SimpleExpression
		public RuleCall getCtlExprSimpleExpressionParserRuleCall_2_0() { return cCtlExprSimpleExpressionParserRuleCall_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class LtlSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LtlSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLTLSPECKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameIdNAMEKeyword_1_0_0 = (Keyword)cNameIdAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cLtlExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLtlExprSimpleExpressionParserRuleCall_2_0 = (RuleCall)cLtlExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LtlSpecification hidden(WS, SL_COMMENT):
		//	"LTLSPEC" (nameId?="NAME" name=ID ":=")? ltlExpr=SimpleExpression ";"?;
		public ParserRule getRule() { return rule; }

		//"LTLSPEC" (nameId?="NAME" name=ID ":=")? ltlExpr=SimpleExpression ";"?
		public Group getGroup() { return cGroup; }

		//"LTLSPEC"
		public Keyword getLTLSPECKeyword_0() { return cLTLSPECKeyword_0; }

		//(nameId?="NAME" name=ID ":=")?
		public Group getGroup_1() { return cGroup_1; }

		//nameId?="NAME"
		public Assignment getNameIdAssignment_1_0() { return cNameIdAssignment_1_0; }

		//"NAME"
		public Keyword getNameIdNAMEKeyword_1_0_0() { return cNameIdNAMEKeyword_1_0_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_2() { return cColonEqualsSignKeyword_1_2; }

		//ltlExpr=SimpleExpression
		public Assignment getLtlExprAssignment_2() { return cLtlExprAssignment_2; }

		//SimpleExpression
		public RuleCall getLtlExprSimpleExpressionParserRuleCall_2_0() { return cLtlExprSimpleExpressionParserRuleCall_2_0; }

		//";"?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModuleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeSpecifier hidden(WS, SL_COMMENT):
		//	SimpleType | ModuleType;
		public ParserRule getRule() { return rule; }

		//SimpleType | ModuleType
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_0() { return cSimpleTypeParserRuleCall_0; }

		//ModuleType
		public RuleCall getModuleTypeParserRuleCall_1() { return cModuleTypeParserRuleCall_1; }
	}

	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cBooleanKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cWordTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cWordKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cWordNumberAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cWordNumberNUMBERTerminalRuleCall_1_1_2_0 = (RuleCall)cWordNumberAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cUnsignedWordTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cUnsignedKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cWordKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cUWordNumberAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cUWordNumberNUMBERTerminalRuleCall_2_1_3_0 = (RuleCall)cUWordNumberAssignment_2_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_4 = (Keyword)cGroup_2_1.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSignedWordTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cSignedWordKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cSignedNumberAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cSignedNumberNUMBERTerminalRuleCall_3_1_2_0 = (RuleCall)cSignedNumberAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cEnumTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValueValParserRuleCall_4_2_0 = (RuleCall)cValueAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cValueAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cValueValParserRuleCall_4_3_1_0 = (RuleCall)cValueAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cRangeTypeAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cLowAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLowNUMBERTerminalRuleCall_5_1_0 = (RuleCall)cLowAssignment_5_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cHighAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cHighNUMBERTerminalRuleCall_5_3_0 = (RuleCall)cHighAssignment_5_3.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cArrayTypeAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cArrayKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cBoundsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cBoundsRangeParserRuleCall_6_2_0 = (RuleCall)cBoundsAssignment_6_2.eContents().get(0);
		private final Keyword cOfKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cTypeAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cTypeSimpleTypeParserRuleCall_6_4_0 = (RuleCall)cTypeAssignment_6_4.eContents().get(0);
		
		//SimpleType hidden(WS, SL_COMMENT):
		//	{BooleanType} "boolean" | {WordType} ("word" "[" wordNumber=NUMBER "]") | {UnsignedWordType} ("unsigned" "word" "["
		//	uWordNumber=NUMBER "]") | {SignedWordType} ("signed word" "[" signedNumber=NUMBER "]") | {EnumType} "{" value+=Val
		//	("," value+=Val)* "}" | {RangeType} low=NUMBER ".." high=NUMBER | {ArrayType} "array" bounds=Range "of"
		//	type=SimpleType;
		public ParserRule getRule() { return rule; }

		//{BooleanType} "boolean" | {WordType} ("word" "[" wordNumber=NUMBER "]") | {UnsignedWordType} ("unsigned" "word" "["
		//uWordNumber=NUMBER "]") | {SignedWordType} ("signed word" "[" signedNumber=NUMBER "]") | {EnumType} "{" value+=Val (","
		//value+=Val)* "}" | {RangeType} low=NUMBER ".." high=NUMBER | {ArrayType} "array" bounds=Range "of" type=SimpleType
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BooleanType} "boolean"
		public Group getGroup_0() { return cGroup_0; }

		//{BooleanType}
		public Action getBooleanTypeAction_0_0() { return cBooleanTypeAction_0_0; }

		//"boolean"
		public Keyword getBooleanKeyword_0_1() { return cBooleanKeyword_0_1; }

		//{WordType} ("word" "[" wordNumber=NUMBER "]")
		public Group getGroup_1() { return cGroup_1; }

		//{WordType}
		public Action getWordTypeAction_1_0() { return cWordTypeAction_1_0; }

		//"word" "[" wordNumber=NUMBER "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"word"
		public Keyword getWordKeyword_1_1_0() { return cWordKeyword_1_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_1() { return cLeftSquareBracketKeyword_1_1_1; }

		//wordNumber=NUMBER
		public Assignment getWordNumberAssignment_1_1_2() { return cWordNumberAssignment_1_1_2; }

		//NUMBER
		public RuleCall getWordNumberNUMBERTerminalRuleCall_1_1_2_0() { return cWordNumberNUMBERTerminalRuleCall_1_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_3() { return cRightSquareBracketKeyword_1_1_3; }

		//{UnsignedWordType} ("unsigned" "word" "[" uWordNumber=NUMBER "]")
		public Group getGroup_2() { return cGroup_2; }

		//{UnsignedWordType}
		public Action getUnsignedWordTypeAction_2_0() { return cUnsignedWordTypeAction_2_0; }

		//"unsigned" "word" "[" uWordNumber=NUMBER "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"unsigned"
		public Keyword getUnsignedKeyword_2_1_0() { return cUnsignedKeyword_2_1_0; }

		//"word"
		public Keyword getWordKeyword_2_1_1() { return cWordKeyword_2_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_2() { return cLeftSquareBracketKeyword_2_1_2; }

		//uWordNumber=NUMBER
		public Assignment getUWordNumberAssignment_2_1_3() { return cUWordNumberAssignment_2_1_3; }

		//NUMBER
		public RuleCall getUWordNumberNUMBERTerminalRuleCall_2_1_3_0() { return cUWordNumberNUMBERTerminalRuleCall_2_1_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_4() { return cRightSquareBracketKeyword_2_1_4; }

		//{SignedWordType} ("signed word" "[" signedNumber=NUMBER "]")
		public Group getGroup_3() { return cGroup_3; }

		//{SignedWordType}
		public Action getSignedWordTypeAction_3_0() { return cSignedWordTypeAction_3_0; }

		//"signed word" "[" signedNumber=NUMBER "]"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"signed word"
		public Keyword getSignedWordKeyword_3_1_0() { return cSignedWordKeyword_3_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_1_1() { return cLeftSquareBracketKeyword_3_1_1; }

		//signedNumber=NUMBER
		public Assignment getSignedNumberAssignment_3_1_2() { return cSignedNumberAssignment_3_1_2; }

		//NUMBER
		public RuleCall getSignedNumberNUMBERTerminalRuleCall_3_1_2_0() { return cSignedNumberNUMBERTerminalRuleCall_3_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_1_3() { return cRightSquareBracketKeyword_3_1_3; }

		//{EnumType} "{" value+=Val ("," value+=Val)* "}"
		public Group getGroup_4() { return cGroup_4; }

		//{EnumType}
		public Action getEnumTypeAction_4_0() { return cEnumTypeAction_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//value+=Val
		public Assignment getValueAssignment_4_2() { return cValueAssignment_4_2; }

		//Val
		public RuleCall getValueValParserRuleCall_4_2_0() { return cValueValParserRuleCall_4_2_0; }

		//("," value+=Val)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//value+=Val
		public Assignment getValueAssignment_4_3_1() { return cValueAssignment_4_3_1; }

		//Val
		public RuleCall getValueValParserRuleCall_4_3_1_0() { return cValueValParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//{RangeType} low=NUMBER ".." high=NUMBER
		public Group getGroup_5() { return cGroup_5; }

		//{RangeType}
		public Action getRangeTypeAction_5_0() { return cRangeTypeAction_5_0; }

		//low=NUMBER
		public Assignment getLowAssignment_5_1() { return cLowAssignment_5_1; }

		//NUMBER
		public RuleCall getLowNUMBERTerminalRuleCall_5_1_0() { return cLowNUMBERTerminalRuleCall_5_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_5_2() { return cFullStopFullStopKeyword_5_2; }

		//high=NUMBER
		public Assignment getHighAssignment_5_3() { return cHighAssignment_5_3; }

		//NUMBER
		public RuleCall getHighNUMBERTerminalRuleCall_5_3_0() { return cHighNUMBERTerminalRuleCall_5_3_0; }

		//{ArrayType} "array" bounds=Range "of" type=SimpleType
		public Group getGroup_6() { return cGroup_6; }

		//{ArrayType}
		public Action getArrayTypeAction_6_0() { return cArrayTypeAction_6_0; }

		//"array"
		public Keyword getArrayKeyword_6_1() { return cArrayKeyword_6_1; }

		//bounds=Range
		public Assignment getBoundsAssignment_6_2() { return cBoundsAssignment_6_2; }

		//Range
		public RuleCall getBoundsRangeParserRuleCall_6_2_0() { return cBoundsRangeParserRuleCall_6_2_0; }

		//"of"
		public Keyword getOfKeyword_6_3() { return cOfKeyword_6_3; }

		//type=SimpleType
		public Assignment getTypeAssignment_6_4() { return cTypeAssignment_6_4; }

		//SimpleType
		public RuleCall getTypeSimpleTypeParserRuleCall_6_4_0() { return cTypeSimpleTypeParserRuleCall_6_4_0; }
	}

	public class ModuleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAsyncrProcessTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cProcessKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cModuleAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cModuleModuleCrossReference_0_1_1_0 = (CrossReference)cModuleAssignment_0_1_1.eContents().get(0);
		private final RuleCall cModuleModuleIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cModuleModuleCrossReference_0_1_1_0.eContents().get(1);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cParamsSimpleExpressionParserRuleCall_0_1_2_1_0 = (RuleCall)cParamsAssignment_0_1_2_1.eContents().get(0);
		private final Group cGroup_0_1_2_2 = (Group)cGroup_0_1_2.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_2_2_0 = (Keyword)cGroup_0_1_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_0_1_2_2_1 = (Assignment)cGroup_0_1_2_2.eContents().get(1);
		private final RuleCall cParamsSimpleExpressionParserRuleCall_0_1_2_2_1_0 = (RuleCall)cParamsAssignment_0_1_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2_3 = (Keyword)cGroup_0_1_2.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSyncrProcessTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cModuleAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final CrossReference cModuleModuleCrossReference_1_1_0_0 = (CrossReference)cModuleAssignment_1_1_0.eContents().get(0);
		private final RuleCall cModuleModuleIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cModuleModuleCrossReference_1_1_0_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cParamsSimpleExpressionParserRuleCall_1_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_2_1 = (Assignment)cGroup_1_1_1_2.eContents().get(1);
		private final RuleCall cParamsSimpleExpressionParserRuleCall_1_1_1_2_1_0 = (RuleCall)cParamsAssignment_1_1_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1_3 = (Keyword)cGroup_1_1_1.eContents().get(3);
		
		//ModuleType hidden(WS, SL_COMMENT):
		//	{AsyncrProcessType} ("process" module=[Module] ("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?) |
		//	{SyncrProcessType} (module=[Module] ("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?);
		public ParserRule getRule() { return rule; }

		//{AsyncrProcessType} ("process" module=[Module] ("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?) |
		//{SyncrProcessType} (module=[Module] ("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?)
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AsyncrProcessType} ("process" module=[Module] ("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?)
		public Group getGroup_0() { return cGroup_0; }

		//{AsyncrProcessType}
		public Action getAsyncrProcessTypeAction_0_0() { return cAsyncrProcessTypeAction_0_0; }

		//"process" module=[Module] ("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"process"
		public Keyword getProcessKeyword_0_1_0() { return cProcessKeyword_0_1_0; }

		//module=[Module]
		public Assignment getModuleAssignment_0_1_1() { return cModuleAssignment_0_1_1; }

		//[Module]
		public CrossReference getModuleModuleCrossReference_0_1_1_0() { return cModuleModuleCrossReference_0_1_1_0; }

		//ID
		public RuleCall getModuleModuleIDTerminalRuleCall_0_1_1_0_1() { return cModuleModuleIDTerminalRuleCall_0_1_1_0_1; }

		//("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1_2_0() { return cLeftParenthesisKeyword_0_1_2_0; }

		//params+=SimpleExpression
		public Assignment getParamsAssignment_0_1_2_1() { return cParamsAssignment_0_1_2_1; }

		//SimpleExpression
		public RuleCall getParamsSimpleExpressionParserRuleCall_0_1_2_1_0() { return cParamsSimpleExpressionParserRuleCall_0_1_2_1_0; }

		//("," params+=SimpleExpression)*
		public Group getGroup_0_1_2_2() { return cGroup_0_1_2_2; }

		//","
		public Keyword getCommaKeyword_0_1_2_2_0() { return cCommaKeyword_0_1_2_2_0; }

		//params+=SimpleExpression
		public Assignment getParamsAssignment_0_1_2_2_1() { return cParamsAssignment_0_1_2_2_1; }

		//SimpleExpression
		public RuleCall getParamsSimpleExpressionParserRuleCall_0_1_2_2_1_0() { return cParamsSimpleExpressionParserRuleCall_0_1_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_2_3() { return cRightParenthesisKeyword_0_1_2_3; }

		//{SyncrProcessType} (module=[Module] ("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?)
		public Group getGroup_1() { return cGroup_1; }

		//{SyncrProcessType}
		public Action getSyncrProcessTypeAction_1_0() { return cSyncrProcessTypeAction_1_0; }

		//module=[Module] ("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//module=[Module]
		public Assignment getModuleAssignment_1_1_0() { return cModuleAssignment_1_1_0; }

		//[Module]
		public CrossReference getModuleModuleCrossReference_1_1_0_0() { return cModuleModuleCrossReference_1_1_0_0; }

		//ID
		public RuleCall getModuleModuleIDTerminalRuleCall_1_1_0_0_1() { return cModuleModuleIDTerminalRuleCall_1_1_0_0_1; }

		//("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_1_0() { return cLeftParenthesisKeyword_1_1_1_0; }

		//params+=SimpleExpression
		public Assignment getParamsAssignment_1_1_1_1() { return cParamsAssignment_1_1_1_1; }

		//SimpleExpression
		public RuleCall getParamsSimpleExpressionParserRuleCall_1_1_1_1_0() { return cParamsSimpleExpressionParserRuleCall_1_1_1_1_0; }

		//("," params+=SimpleExpression)*
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_1_2_0() { return cCommaKeyword_1_1_1_2_0; }

		//params+=SimpleExpression
		public Assignment getParamsAssignment_1_1_1_2_1() { return cParamsAssignment_1_1_1_2_1; }

		//SimpleExpression
		public RuleCall getParamsSimpleExpressionParserRuleCall_1_1_1_2_1_0() { return cParamsSimpleExpressionParserRuleCall_1_1_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_1_3() { return cRightParenthesisKeyword_1_1_1_3; }
	}

	public class FormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParameter");
		private final Assignment cParamIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParamIdIDTerminalRuleCall_0 = (RuleCall)cParamIdAssignment.eContents().get(0);
		
		//FormalParameter:
		//	paramId=ID;
		public ParserRule getRule() { return rule; }

		//paramId=ID
		public Assignment getParamIdAssignment() { return cParamIdAssignment; }

		//ID
		public RuleCall getParamIdIDTerminalRuleCall_0() { return cParamIdIDTerminalRuleCall_0; }
	}

	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleExpression");
		private final RuleCall cBinaryExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SimpleExpression hidden(WS, SL_COMMENT):
		//	BinaryExpression;
		public ParserRule getRule() { return rule; }

		//BinaryExpression
		public RuleCall getBinaryExpressionParserRuleCall() { return cBinaryExpressionParserRuleCall; }
	}

	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalSimpleExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cBinaryOperatorParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cTerminalSimpleExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//BinaryExpression:
		//	TerminalSimpleExpression (BinaryOperator TerminalSimpleExpression)*;
		public ParserRule getRule() { return rule; }

		//TerminalSimpleExpression (BinaryOperator TerminalSimpleExpression)*
		public Group getGroup() { return cGroup; }

		//TerminalSimpleExpression
		public RuleCall getTerminalSimpleExpressionParserRuleCall_0() { return cTerminalSimpleExpressionParserRuleCall_0; }

		//(BinaryOperator TerminalSimpleExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//BinaryOperator
		public RuleCall getBinaryOperatorParserRuleCall_1_0() { return cBinaryOperatorParserRuleCall_1_0; }

		//TerminalSimpleExpression
		public RuleCall getTerminalSimpleExpressionParserRuleCall_1_1() { return cTerminalSimpleExpressionParserRuleCall_1_1; }
	}

	public class TerminalSimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalSimpleExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRangeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNextExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBracketExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnaryExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCaseExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSetExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEAExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBoolWordConvertExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//TerminalSimpleExpression:
		//	Literal | Range | NextExpression | BracketExpression | UnaryExpression | CaseExpression | SetExpression | EAExpression
		//	| BoolWordConvertExpression;
		public ParserRule getRule() { return rule; }

		//Literal | Range | NextExpression | BracketExpression | UnaryExpression | CaseExpression | SetExpression | EAExpression |
		//BoolWordConvertExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//Range
		public RuleCall getRangeParserRuleCall_1() { return cRangeParserRuleCall_1; }

		//NextExpression
		public RuleCall getNextExpressionParserRuleCall_2() { return cNextExpressionParserRuleCall_2; }

		//BracketExpression
		public RuleCall getBracketExpressionParserRuleCall_3() { return cBracketExpressionParserRuleCall_3; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_4() { return cUnaryExpressionParserRuleCall_4; }

		//CaseExpression
		public RuleCall getCaseExpressionParserRuleCall_5() { return cCaseExpressionParserRuleCall_5; }

		//SetExpression
		public RuleCall getSetExpressionParserRuleCall_6() { return cSetExpressionParserRuleCall_6; }

		//EAExpression
		public RuleCall getEAExpressionParserRuleCall_7() { return cEAExpressionParserRuleCall_7; }

		//BoolWordConvertExpression
		public RuleCall getBoolWordConvertExpressionParserRuleCall_8() { return cBoolWordConvertExpressionParserRuleCall_8; }
	}

	public class NextExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NextExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSimpleExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NextExpression:
		//	"next" "(" SimpleExpression ")";
		public ParserRule getRule() { return rule; }

		//"next" "(" SimpleExpression ")"
		public Group getGroup() { return cGroup; }

		//"next"
		public Keyword getNextKeyword_0() { return cNextKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_2() { return cSimpleExpressionParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BracketExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BracketExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSimpleExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BracketExpression:
		//	"(" SimpleExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" SimpleExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_1() { return cSimpleExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOperatorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSimpleExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//UnaryExpression:
		//	UnaryOperator SimpleExpression;
		public ParserRule getRule() { return rule; }

		//UnaryOperator SimpleExpression
		public Group getGroup() { return cGroup; }

		//UnaryOperator
		public RuleCall getUnaryOperatorParserRuleCall_0() { return cUnaryOperatorParserRuleCall_0; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_1() { return cSimpleExpressionParserRuleCall_1; }
	}

	public class CaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CaseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimpleExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cSimpleExpressionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cEsacKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CaseExpression:
		//	"case" (SimpleExpression ":" SimpleExpression ";")+ "esac";
		public ParserRule getRule() { return rule; }

		//"case" (SimpleExpression ":" SimpleExpression ";")+ "esac"
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//(SimpleExpression ":" SimpleExpression ";")+
		public Group getGroup_1() { return cGroup_1; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_1_0() { return cSimpleExpressionParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_1_2() { return cSimpleExpressionParserRuleCall_1_2; }

		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }

		//"esac"
		public Keyword getEsacKeyword_2() { return cEsacKeyword_2; }
	}

	public class SetExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSimpleExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cSimpleExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetExpression:
		//	"{" SimpleExpression ("," SimpleExpression)* "}";
		public ParserRule getRule() { return rule; }

		//"{" SimpleExpression ("," SimpleExpression)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_1() { return cSimpleExpressionParserRuleCall_1; }

		//("," SimpleExpression)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_2_1() { return cSimpleExpressionParserRuleCall_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class EAExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EAExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSimpleExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EAExpression:
		//	("E" | "A") "[" SimpleExpression "]";
		public ParserRule getRule() { return rule; }

		//("E" | "A") "[" SimpleExpression "]"
		public Group getGroup() { return cGroup; }

		//"E" | "A"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"E"
		public Keyword getEKeyword_0_0() { return cEKeyword_0_0; }

		//"A"
		public Keyword getAKeyword_0_1() { return cAKeyword_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_2() { return cSimpleExpressionParserRuleCall_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class BoolWordConvertExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolWordConvertExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cWord1Keyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cBoolKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSimpleExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BoolWordConvertExpression:
		//	("word1" | "bool") "(" SimpleExpression ")";
		public ParserRule getRule() { return rule; }

		//("word1" | "bool") "(" SimpleExpression ")"
		public Group getGroup() { return cGroup; }

		//"word1" | "bool"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"word1"
		public Keyword getWord1Keyword_0_0() { return cWord1Keyword_0_0; }

		//"bool"
		public Keyword getBoolKeyword_0_1() { return cBoolKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_2() { return cSimpleExpressionParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BooleanConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTRUEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFALSEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanConstant:
		//	"TRUE" | "FALSE";
		public ParserRule getRule() { return rule; }

		//"TRUE" | "FALSE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"TRUE"
		public Keyword getTRUEKeyword_0() { return cTRUEKeyword_0; }

		//"FALSE"
		public Keyword getFALSEKeyword_1() { return cFALSEKeyword_1; }
	}

	public class BinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cUKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cAmpersandKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cVerticalLineKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cXorKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cXnorKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cExclamationMarkEqualsSignKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cLessThanSignKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cGreaterThanSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cLessThanSignEqualsSignKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cGreaterThanSignEqualsSignKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cPlusSignKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cHyphenMinusKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cAsteriskKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cSolidusKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cColonColonKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cLessThanSignLessThanSignKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cUnionKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cInKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cModKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		
		//BinaryOperator:
		//	"U" | "V" | "S" | "T" | "->" | "<->" | "&" | "|" | "xor" | "xnor" | "=" | "!=" | "<" | ">" | "<=" | ">=" | "+" | "-" |
		//	"*" | "/" | "::" | "<<" | ">>" | "union" | "in" | "mod";
		public ParserRule getRule() { return rule; }

		//"U" | "V" | "S" | "T" | "->" | "<->" | "&" | "|" | "xor" | "xnor" | "=" | "!=" | "<" | ">" | "<=" | ">=" | "+" | "-" |
		//"*" | "/" | "::" | "<<" | ">>" | "union" | "in" | "mod"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"U"
		public Keyword getUKeyword_0() { return cUKeyword_0; }

		//"V"
		public Keyword getVKeyword_1() { return cVKeyword_1; }

		//"S"
		public Keyword getSKeyword_2() { return cSKeyword_2; }

		//"T"
		public Keyword getTKeyword_3() { return cTKeyword_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }

		//"<->"
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_5() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_5; }

		//"&"
		public Keyword getAmpersandKeyword_6() { return cAmpersandKeyword_6; }

		//"|"
		public Keyword getVerticalLineKeyword_7() { return cVerticalLineKeyword_7; }

		//"xor"
		public Keyword getXorKeyword_8() { return cXorKeyword_8; }

		//"xnor"
		public Keyword getXnorKeyword_9() { return cXnorKeyword_9; }

		//"="
		public Keyword getEqualsSignKeyword_10() { return cEqualsSignKeyword_10; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_11() { return cExclamationMarkEqualsSignKeyword_11; }

		//"<"
		public Keyword getLessThanSignKeyword_12() { return cLessThanSignKeyword_12; }

		//">"
		public Keyword getGreaterThanSignKeyword_13() { return cGreaterThanSignKeyword_13; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_14() { return cLessThanSignEqualsSignKeyword_14; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_15() { return cGreaterThanSignEqualsSignKeyword_15; }

		//"+"
		public Keyword getPlusSignKeyword_16() { return cPlusSignKeyword_16; }

		//"-"
		public Keyword getHyphenMinusKeyword_17() { return cHyphenMinusKeyword_17; }

		//"*"
		public Keyword getAsteriskKeyword_18() { return cAsteriskKeyword_18; }

		//"/"
		public Keyword getSolidusKeyword_19() { return cSolidusKeyword_19; }

		//"::"
		public Keyword getColonColonKeyword_20() { return cColonColonKeyword_20; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_21() { return cLessThanSignLessThanSignKeyword_21; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_22() { return cGreaterThanSignGreaterThanSignKeyword_22; }

		//"union"
		public Keyword getUnionKeyword_23() { return cUnionKeyword_23; }

		//"in"
		public Keyword getInKeyword_24() { return cInKeyword_24; }

		//"mod"
		public Keyword getModKeyword_25() { return cModKeyword_25; }
	}

	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cXKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cYKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cZKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cHKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cEGKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cEXKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cEFKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cAGKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cAXKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cAFKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		
		//UnaryOperator:
		//	"!" | "-" | "+" | "X" | "G" | "F" | "Y" | "Z" | "H" | "O" | "EG" | "EX" | "EF" | "AG" | "AX" | "AF";
		public ParserRule getRule() { return rule; }

		//"!" | "-" | "+" | "X" | "G" | "F" | "Y" | "Z" | "H" | "O" | "EG" | "EX" | "EF" | "AG" | "AX" | "AF"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }

		//"X"
		public Keyword getXKeyword_3() { return cXKeyword_3; }

		//"G"
		public Keyword getGKeyword_4() { return cGKeyword_4; }

		//"F"
		public Keyword getFKeyword_5() { return cFKeyword_5; }

		//"Y"
		public Keyword getYKeyword_6() { return cYKeyword_6; }

		//"Z"
		public Keyword getZKeyword_7() { return cZKeyword_7; }

		//"H"
		public Keyword getHKeyword_8() { return cHKeyword_8; }

		//"O"
		public Keyword getOKeyword_9() { return cOKeyword_9; }

		//"EG"
		public Keyword getEGKeyword_10() { return cEGKeyword_10; }

		//"EX"
		public Keyword getEXKeyword_11() { return cEXKeyword_11; }

		//"EF"
		public Keyword getEFKeyword_12() { return cEFKeyword_12; }

		//"AG"
		public Keyword getAGKeyword_13() { return cAGKeyword_13; }

		//"AX"
		public Keyword getAXKeyword_14() { return cAXKeyword_14; }

		//"AF"
		public Keyword getAFKeyword_15() { return cAFKeyword_15; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNUMBERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNUMBERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Range:
		//	NUMBER ".." NUMBER;
		public ParserRule getRule() { return rule; }

		//NUMBER ".." NUMBER
		public Group getGroup() { return cGroup; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_0() { return cNUMBERTerminalRuleCall_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_2() { return cNUMBERTerminalRuleCall_2; }
	}

	public class ValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Val");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Val hidden(WS, SL_COMMENT):
		//	ID | NUMBER | BooleanConstant;
		public ParserRule getRule() { return rule; }

		//ID | NUMBER | BooleanConstant
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1() { return cNUMBERTerminalRuleCall_1; }

		//BooleanConstant
		public RuleCall getBooleanConstantParserRuleCall_2() { return cBooleanConstantParserRuleCall_2; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNUMBERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cSelfKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableIdentifierParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal:
		//	NUMBER | "self" | BooleanConstant | VariableIdentifier;
		public ParserRule getRule() { return rule; }

		//NUMBER | "self" | BooleanConstant | VariableIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_0() { return cNUMBERTerminalRuleCall_0; }

		//"self"
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }

		//BooleanConstant
		public RuleCall getBooleanConstantParserRuleCall_2() { return cBooleanConstantParserRuleCall_2; }

		//VariableIdentifier
		public RuleCall getVariableIdentifierParserRuleCall_3() { return cVariableIdentifierParserRuleCall_3; }
	}

	public class VariableIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final RuleCall cNUMBERTerminalRuleCall_1_2_1_0 = (RuleCall)cAlternatives_1_2_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_2_1_1 = (RuleCall)cAlternatives_1_2_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cNUMBERTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Keyword cColonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final RuleCall cNUMBERTerminalRuleCall_2_5 = (RuleCall)cGroup_2.eContents().get(5);
		private final Keyword cRightSquareBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		
		//VariableIdentifier:
		//	ID ("." ID)* | ID ("." ID)* ("[" (NUMBER | ID) "]")+ | ID ("." ID)* "[" NUMBER ":" NUMBER "]";
		public ParserRule getRule() { return rule; }

		//ID ("." ID)* | ID ("." ID)* ("[" (NUMBER | ID) "]")+ | ID ("." ID)* "[" NUMBER ":" NUMBER "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID ("." ID)*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//("." ID)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1_0() { return cFullStopKeyword_0_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_1_1() { return cIDTerminalRuleCall_0_1_1; }

		//ID ("." ID)* ("[" (NUMBER | ID) "]")+
		public Group getGroup_1() { return cGroup_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//("." ID)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }

		//("[" (NUMBER | ID) "]")+
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }

		//NUMBER | ID
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1_2_1_0() { return cNUMBERTerminalRuleCall_1_2_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_2_1_1() { return cIDTerminalRuleCall_1_2_1_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }

		//ID ("." ID)* "[" NUMBER ":" NUMBER "]"
		public Group getGroup_2() { return cGroup_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_0() { return cIDTerminalRuleCall_2_0; }

		//("." ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"."
		public Keyword getFullStopKeyword_2_1_0() { return cFullStopKeyword_2_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1_1() { return cIDTerminalRuleCall_2_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_2_3() { return cNUMBERTerminalRuleCall_2_3; }

		//":"
		public Keyword getColonKeyword_2_4() { return cColonKeyword_2_4; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_2_5() { return cNUMBERTerminalRuleCall_2_5; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_6() { return cRightSquareBracketKeyword_2_6; }
	}
	
	
	private ModelElements pModel;
	private ModuleElements pModule;
	private MainModuleElements pMainModule;
	private OtherModuleElements pOtherModule;
	private ModuleElementElements pModuleElement;
	private VariableDeclarationElements pVariableDeclaration;
	private IVariableDeclarationElements pIVariableDeclaration;
	private FrozenVariableDeclarationElements pFrozenVariableDeclaration;
	private VarBodyElements pVarBody;
	private DefineDeclarationElements pDefineDeclaration;
	private DefineBodyElements pDefineBody;
	private ConstantsDeclarationElements pConstantsDeclaration;
	private AssignConstraintElements pAssignConstraint;
	private AssignBodyElements pAssignBody;
	private VarBodyAssignElements pVarBodyAssign;
	private InitBodyElements pInitBody;
	private NextBodyElements pNextBody;
	private TransConstraintElements pTransConstraint;
	private InitConstraintElements pInitConstraint;
	private InvarConstraintElements pInvarConstraint;
	private FairnessConstraintElements pFairnessConstraint;
	private FairnessExpressionElements pFairnessExpression;
	private JusticeExpressionElements pJusticeExpression;
	private CompassionExpressionElements pCompassionExpression;
	private InvarSpecificationElements pInvarSpecification;
	private CtlSpecificationElements pCtlSpecification;
	private LtlSpecificationElements pLtlSpecification;
	private TypeSpecifierElements pTypeSpecifier;
	private SimpleTypeElements pSimpleType;
	private ModuleTypeElements pModuleType;
	private FormalParameterElements pFormalParameter;
	private SimpleExpressionElements pSimpleExpression;
	private BinaryExpressionElements pBinaryExpression;
	private TerminalSimpleExpressionElements pTerminalSimpleExpression;
	private NextExpressionElements pNextExpression;
	private BracketExpressionElements pBracketExpression;
	private UnaryExpressionElements pUnaryExpression;
	private CaseExpressionElements pCaseExpression;
	private SetExpressionElements pSetExpression;
	private EAExpressionElements pEAExpression;
	private BoolWordConvertExpressionElements pBoolWordConvertExpression;
	private BooleanConstantElements pBooleanConstant;
	private BinaryOperatorElements pBinaryOperator;
	private UnaryOperatorElements pUnaryOperator;
	private RangeElements pRange;
	private ValElements pVal;
	private LiteralElements pLiteral;
	private VariableIdentifierElements pVariableIdentifier;
	private TerminalRule tNUMBER;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tSL_COMMENT_BODY;
	private TerminalRule tID;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public NuSmvLangGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model hidden(WS, SL_COMMENT):
	//	modules+=Module*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Module:
	//	"MODULE" (MainModule | OtherModule) moduleElement+=ModuleElement*;
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//MainModule:
	//	name="main";
	public MainModuleElements getMainModuleAccess() {
		return (pMainModule != null) ? pMainModule : (pMainModule = new MainModuleElements());
	}
	
	public ParserRule getMainModuleRule() {
		return getMainModuleAccess().getRule();
	}

	//OtherModule:
	//	name=ID ("(" params+=FormalParameter ("," params+=FormalParameter)* ")")?;
	public OtherModuleElements getOtherModuleAccess() {
		return (pOtherModule != null) ? pOtherModule : (pOtherModule = new OtherModuleElements());
	}
	
	public ParserRule getOtherModuleRule() {
		return getOtherModuleAccess().getRule();
	}

	////| IsaDeclaration
	//ModuleElement hidden(WS, SL_COMMENT):
	//	VariableDeclaration | IVariableDeclaration | FrozenVariableDeclaration | DefineDeclaration | ConstantsDeclaration |
	//	AssignConstraint | TransConstraint | InitConstraint | InvarConstraint | FairnessConstraint | CtlSpecification |
	//	LtlSpecification | InvarSpecification;
	public ModuleElementElements getModuleElementAccess() {
		return (pModuleElement != null) ? pModuleElement : (pModuleElement = new ModuleElementElements());
	}
	
	public ParserRule getModuleElementRule() {
		return getModuleElementAccess().getRule();
	}

	//// ISA is deprecated in NuSMV 2.5
	////IsaDeclaration hidden(WS, SL_COMMENT):
	////	"ISA" id=ID;
	//VariableDeclaration hidden(WS, SL_COMMENT):
	//	"VAR" vars+=VarBody+;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//IVariableDeclaration hidden(WS, SL_COMMENT):
	//	"IVAR" vars+=VarBody+;
	public IVariableDeclarationElements getIVariableDeclarationAccess() {
		return (pIVariableDeclaration != null) ? pIVariableDeclaration : (pIVariableDeclaration = new IVariableDeclarationElements());
	}
	
	public ParserRule getIVariableDeclarationRule() {
		return getIVariableDeclarationAccess().getRule();
	}

	//FrozenVariableDeclaration hidden(WS, SL_COMMENT):
	//	"FROZENVAR" vars+=VarBody+;
	public FrozenVariableDeclarationElements getFrozenVariableDeclarationAccess() {
		return (pFrozenVariableDeclaration != null) ? pFrozenVariableDeclaration : (pFrozenVariableDeclaration = new FrozenVariableDeclarationElements());
	}
	
	public ParserRule getFrozenVariableDeclarationRule() {
		return getFrozenVariableDeclarationAccess().getRule();
	}

	//VarBody hidden(WS, SL_COMMENT):
	//	varId=ID ":" type=TypeSpecifier ";";
	public VarBodyElements getVarBodyAccess() {
		return (pVarBody != null) ? pVarBody : (pVarBody = new VarBodyElements());
	}
	
	public ParserRule getVarBodyRule() {
		return getVarBodyAccess().getRule();
	}

	//DefineDeclaration hidden(WS, SL_COMMENT):
	//	"DEFINE" defineBodies+=DefineBody+;
	public DefineDeclarationElements getDefineDeclarationAccess() {
		return (pDefineDeclaration != null) ? pDefineDeclaration : (pDefineDeclaration = new DefineDeclarationElements());
	}
	
	public ParserRule getDefineDeclarationRule() {
		return getDefineDeclarationAccess().getRule();
	}

	//DefineBody hidden(WS, SL_COMMENT):
	//	varId=ID ":=" assignment=SimpleExpression ";";
	public DefineBodyElements getDefineBodyAccess() {
		return (pDefineBody != null) ? pDefineBody : (pDefineBody = new DefineBodyElements());
	}
	
	public ParserRule getDefineBodyRule() {
		return getDefineBodyAccess().getRule();
	}

	//ConstantsDeclaration hidden(WS, SL_COMMENT):
	//	"CONSTANTS" constants+=ID ("," constants+=ID)* ";";
	public ConstantsDeclarationElements getConstantsDeclarationAccess() {
		return (pConstantsDeclaration != null) ? pConstantsDeclaration : (pConstantsDeclaration = new ConstantsDeclarationElements());
	}
	
	public ParserRule getConstantsDeclarationRule() {
		return getConstantsDeclarationAccess().getRule();
	}

	//AssignConstraint hidden(WS, SL_COMMENT):
	//	"ASSIGN" bodies+=AssignBody+;
	public AssignConstraintElements getAssignConstraintAccess() {
		return (pAssignConstraint != null) ? pAssignConstraint : (pAssignConstraint = new AssignConstraintElements());
	}
	
	public ParserRule getAssignConstraintRule() {
		return getAssignConstraintAccess().getRule();
	}

	//AssignBody hidden(WS, SL_COMMENT):
	//	VarBodyAssign | InitBody | NextBody;
	public AssignBodyElements getAssignBodyAccess() {
		return (pAssignBody != null) ? pAssignBody : (pAssignBody = new AssignBodyElements());
	}
	
	public ParserRule getAssignBodyRule() {
		return getAssignBodyAccess().getRule();
	}

	//VarBodyAssign hidden(WS, SL_COMMENT):
	//	varId=VariableIdentifier ":=" assignment=SimpleExpression ";";
	public VarBodyAssignElements getVarBodyAssignAccess() {
		return (pVarBodyAssign != null) ? pVarBodyAssign : (pVarBodyAssign = new VarBodyAssignElements());
	}
	
	public ParserRule getVarBodyAssignRule() {
		return getVarBodyAssignAccess().getRule();
	}

	//InitBody hidden(WS, SL_COMMENT):
	//	"init" "(" varId=VariableIdentifier ")" ":=" initExpr=SimpleExpression ";";
	public InitBodyElements getInitBodyAccess() {
		return (pInitBody != null) ? pInitBody : (pInitBody = new InitBodyElements());
	}
	
	public ParserRule getInitBodyRule() {
		return getInitBodyAccess().getRule();
	}

	//NextBody hidden(WS, SL_COMMENT):
	//	"next" "(" varId=VariableIdentifier ")" ":=" nextExpr=SimpleExpression ";";
	public NextBodyElements getNextBodyAccess() {
		return (pNextBody != null) ? pNextBody : (pNextBody = new NextBodyElements());
	}
	
	public ParserRule getNextBodyRule() {
		return getNextBodyAccess().getRule();
	}

	//TransConstraint hidden(WS, SL_COMMENT):
	//	"TRANS" transExpr=SimpleExpression ";"?;
	public TransConstraintElements getTransConstraintAccess() {
		return (pTransConstraint != null) ? pTransConstraint : (pTransConstraint = new TransConstraintElements());
	}
	
	public ParserRule getTransConstraintRule() {
		return getTransConstraintAccess().getRule();
	}

	//InitConstraint hidden(WS, SL_COMMENT):
	//	"INIT" initExpr=SimpleExpression ";"?;
	public InitConstraintElements getInitConstraintAccess() {
		return (pInitConstraint != null) ? pInitConstraint : (pInitConstraint = new InitConstraintElements());
	}
	
	public ParserRule getInitConstraintRule() {
		return getInitConstraintAccess().getRule();
	}

	//InvarConstraint hidden(WS, SL_COMMENT):
	//	"INVAR" invarExpr=SimpleExpression ";"?;
	public InvarConstraintElements getInvarConstraintAccess() {
		return (pInvarConstraint != null) ? pInvarConstraint : (pInvarConstraint = new InvarConstraintElements());
	}
	
	public ParserRule getInvarConstraintRule() {
		return getInvarConstraintAccess().getRule();
	}

	//FairnessConstraint hidden(WS, SL_COMMENT):
	//	FairnessExpression | JusticeExpression | CompassionExpression;
	public FairnessConstraintElements getFairnessConstraintAccess() {
		return (pFairnessConstraint != null) ? pFairnessConstraint : (pFairnessConstraint = new FairnessConstraintElements());
	}
	
	public ParserRule getFairnessConstraintRule() {
		return getFairnessConstraintAccess().getRule();
	}

	//FairnessExpression hidden(WS, SL_COMMENT):
	//	"FAIRNESS" fairnessExpr=SimpleExpression ";"?;
	public FairnessExpressionElements getFairnessExpressionAccess() {
		return (pFairnessExpression != null) ? pFairnessExpression : (pFairnessExpression = new FairnessExpressionElements());
	}
	
	public ParserRule getFairnessExpressionRule() {
		return getFairnessExpressionAccess().getRule();
	}

	//JusticeExpression hidden(WS, SL_COMMENT):
	//	"JUSTICE" justiceExpr=SimpleExpression ";"?;
	public JusticeExpressionElements getJusticeExpressionAccess() {
		return (pJusticeExpression != null) ? pJusticeExpression : (pJusticeExpression = new JusticeExpressionElements());
	}
	
	public ParserRule getJusticeExpressionRule() {
		return getJusticeExpressionAccess().getRule();
	}

	//CompassionExpression hidden(WS, SL_COMMENT):
	//	"COMPASSION (" firstCompassionExpr=SimpleExpression "," secondCompassionExpr=SimpleExpression ")" ";"?;
	public CompassionExpressionElements getCompassionExpressionAccess() {
		return (pCompassionExpression != null) ? pCompassionExpression : (pCompassionExpression = new CompassionExpressionElements());
	}
	
	public ParserRule getCompassionExpressionRule() {
		return getCompassionExpressionAccess().getRule();
	}

	//InvarSpecification hidden(WS, SL_COMMENT):
	//	"INVARSPEC" (name=ID ":=")? invarExpr=SimpleExpression ";"?;
	public InvarSpecificationElements getInvarSpecificationAccess() {
		return (pInvarSpecification != null) ? pInvarSpecification : (pInvarSpecification = new InvarSpecificationElements());
	}
	
	public ParserRule getInvarSpecificationRule() {
		return getInvarSpecificationAccess().getRule();
	}

	//CtlSpecification hidden(WS, SL_COMMENT):
	//	("CTLSPEC" | "SPEC") (nameKeyWord?="NAME" name=ID ":=")? ctlExpr=SimpleExpression ";"?;
	public CtlSpecificationElements getCtlSpecificationAccess() {
		return (pCtlSpecification != null) ? pCtlSpecification : (pCtlSpecification = new CtlSpecificationElements());
	}
	
	public ParserRule getCtlSpecificationRule() {
		return getCtlSpecificationAccess().getRule();
	}

	//LtlSpecification hidden(WS, SL_COMMENT):
	//	"LTLSPEC" (nameId?="NAME" name=ID ":=")? ltlExpr=SimpleExpression ";"?;
	public LtlSpecificationElements getLtlSpecificationAccess() {
		return (pLtlSpecification != null) ? pLtlSpecification : (pLtlSpecification = new LtlSpecificationElements());
	}
	
	public ParserRule getLtlSpecificationRule() {
		return getLtlSpecificationAccess().getRule();
	}

	//TypeSpecifier hidden(WS, SL_COMMENT):
	//	SimpleType | ModuleType;
	public TypeSpecifierElements getTypeSpecifierAccess() {
		return (pTypeSpecifier != null) ? pTypeSpecifier : (pTypeSpecifier = new TypeSpecifierElements());
	}
	
	public ParserRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}

	//SimpleType hidden(WS, SL_COMMENT):
	//	{BooleanType} "boolean" | {WordType} ("word" "[" wordNumber=NUMBER "]") | {UnsignedWordType} ("unsigned" "word" "["
	//	uWordNumber=NUMBER "]") | {SignedWordType} ("signed word" "[" signedNumber=NUMBER "]") | {EnumType} "{" value+=Val
	//	("," value+=Val)* "}" | {RangeType} low=NUMBER ".." high=NUMBER | {ArrayType} "array" bounds=Range "of"
	//	type=SimpleType;
	public SimpleTypeElements getSimpleTypeAccess() {
		return (pSimpleType != null) ? pSimpleType : (pSimpleType = new SimpleTypeElements());
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//ModuleType hidden(WS, SL_COMMENT):
	//	{AsyncrProcessType} ("process" module=[Module] ("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?) |
	//	{SyncrProcessType} (module=[Module] ("(" params+=SimpleExpression ("," params+=SimpleExpression)* ")")?);
	public ModuleTypeElements getModuleTypeAccess() {
		return (pModuleType != null) ? pModuleType : (pModuleType = new ModuleTypeElements());
	}
	
	public ParserRule getModuleTypeRule() {
		return getModuleTypeAccess().getRule();
	}

	//FormalParameter:
	//	paramId=ID;
	public FormalParameterElements getFormalParameterAccess() {
		return (pFormalParameter != null) ? pFormalParameter : (pFormalParameter = new FormalParameterElements());
	}
	
	public ParserRule getFormalParameterRule() {
		return getFormalParameterAccess().getRule();
	}

	//SimpleExpression hidden(WS, SL_COMMENT):
	//	BinaryExpression;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return (pSimpleExpression != null) ? pSimpleExpression : (pSimpleExpression = new SimpleExpressionElements());
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}

	//BinaryExpression:
	//	TerminalSimpleExpression (BinaryOperator TerminalSimpleExpression)*;
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return (pBinaryExpression != null) ? pBinaryExpression : (pBinaryExpression = new BinaryExpressionElements());
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}

	//TerminalSimpleExpression:
	//	Literal | Range | NextExpression | BracketExpression | UnaryExpression | CaseExpression | SetExpression | EAExpression
	//	| BoolWordConvertExpression;
	public TerminalSimpleExpressionElements getTerminalSimpleExpressionAccess() {
		return (pTerminalSimpleExpression != null) ? pTerminalSimpleExpression : (pTerminalSimpleExpression = new TerminalSimpleExpressionElements());
	}
	
	public ParserRule getTerminalSimpleExpressionRule() {
		return getTerminalSimpleExpressionAccess().getRule();
	}

	//NextExpression:
	//	"next" "(" SimpleExpression ")";
	public NextExpressionElements getNextExpressionAccess() {
		return (pNextExpression != null) ? pNextExpression : (pNextExpression = new NextExpressionElements());
	}
	
	public ParserRule getNextExpressionRule() {
		return getNextExpressionAccess().getRule();
	}

	//BracketExpression:
	//	"(" SimpleExpression ")";
	public BracketExpressionElements getBracketExpressionAccess() {
		return (pBracketExpression != null) ? pBracketExpression : (pBracketExpression = new BracketExpressionElements());
	}
	
	public ParserRule getBracketExpressionRule() {
		return getBracketExpressionAccess().getRule();
	}

	//UnaryExpression:
	//	UnaryOperator SimpleExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//CaseExpression:
	//	"case" (SimpleExpression ":" SimpleExpression ";")+ "esac";
	public CaseExpressionElements getCaseExpressionAccess() {
		return (pCaseExpression != null) ? pCaseExpression : (pCaseExpression = new CaseExpressionElements());
	}
	
	public ParserRule getCaseExpressionRule() {
		return getCaseExpressionAccess().getRule();
	}

	//SetExpression:
	//	"{" SimpleExpression ("," SimpleExpression)* "}";
	public SetExpressionElements getSetExpressionAccess() {
		return (pSetExpression != null) ? pSetExpression : (pSetExpression = new SetExpressionElements());
	}
	
	public ParserRule getSetExpressionRule() {
		return getSetExpressionAccess().getRule();
	}

	//EAExpression:
	//	("E" | "A") "[" SimpleExpression "]";
	public EAExpressionElements getEAExpressionAccess() {
		return (pEAExpression != null) ? pEAExpression : (pEAExpression = new EAExpressionElements());
	}
	
	public ParserRule getEAExpressionRule() {
		return getEAExpressionAccess().getRule();
	}

	//BoolWordConvertExpression:
	//	("word1" | "bool") "(" SimpleExpression ")";
	public BoolWordConvertExpressionElements getBoolWordConvertExpressionAccess() {
		return (pBoolWordConvertExpression != null) ? pBoolWordConvertExpression : (pBoolWordConvertExpression = new BoolWordConvertExpressionElements());
	}
	
	public ParserRule getBoolWordConvertExpressionRule() {
		return getBoolWordConvertExpressionAccess().getRule();
	}

	//BooleanConstant:
	//	"TRUE" | "FALSE";
	public BooleanConstantElements getBooleanConstantAccess() {
		return (pBooleanConstant != null) ? pBooleanConstant : (pBooleanConstant = new BooleanConstantElements());
	}
	
	public ParserRule getBooleanConstantRule() {
		return getBooleanConstantAccess().getRule();
	}

	//BinaryOperator:
	//	"U" | "V" | "S" | "T" | "->" | "<->" | "&" | "|" | "xor" | "xnor" | "=" | "!=" | "<" | ">" | "<=" | ">=" | "+" | "-" |
	//	"*" | "/" | "::" | "<<" | ">>" | "union" | "in" | "mod";
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return (pBinaryOperator != null) ? pBinaryOperator : (pBinaryOperator = new BinaryOperatorElements());
	}
	
	public ParserRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}

	//UnaryOperator:
	//	"!" | "-" | "+" | "X" | "G" | "F" | "Y" | "Z" | "H" | "O" | "EG" | "EX" | "EF" | "AG" | "AX" | "AF";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (pUnaryOperator != null) ? pUnaryOperator : (pUnaryOperator = new UnaryOperatorElements());
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//Range:
	//	NUMBER ".." NUMBER;
	public RangeElements getRangeAccess() {
		return (pRange != null) ? pRange : (pRange = new RangeElements());
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//Val hidden(WS, SL_COMMENT):
	//	ID | NUMBER | BooleanConstant;
	public ValElements getValAccess() {
		return (pVal != null) ? pVal : (pVal = new ValElements());
	}
	
	public ParserRule getValRule() {
		return getValAccess().getRule();
	}

	//Literal:
	//	NUMBER | "self" | BooleanConstant | VariableIdentifier;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//VariableIdentifier:
	//	ID ("." ID)* | ID ("." ID)* ("[" (NUMBER | ID) "]")+ | ID ("." ID)* "[" NUMBER ":" NUMBER "]";
	public VariableIdentifierElements getVariableIdentifierAccess() {
		return (pVariableIdentifier != null) ? pVariableIdentifier : (pVariableIdentifier = new VariableIdentifierElements());
	}
	
	public ParserRule getVariableIdentifierRule() {
		return getVariableIdentifierAccess().getRule();
	}

	//terminal NUMBER:
	//	INT;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal SL_COMMENT:
	//	"--" SL_COMMENT_BODY;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal fragment SL_COMMENT_BODY:
	//	!("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENT_BODYRule() {
		return (tSL_COMMENT_BODY != null) ? tSL_COMMENT_BODY : (tSL_COMMENT_BODY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT_BODY"));
	} 

	//terminal ID:
	//	("A".."Z" | "a".."z" | "_") ("A".."Z" | "a".."z" | "_" | "0".."9" | "$" | "#" | "-" | ".")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
