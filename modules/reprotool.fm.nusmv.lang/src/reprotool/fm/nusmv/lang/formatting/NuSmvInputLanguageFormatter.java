/*
 * generated by Xtext
 */
package reprotool.fm.nusmv.lang.formatting;

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

import reprotool.fm.nusmv.lang.services.NuSmvInputLanguageGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class NuSmvInputLanguageFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
		NuSmvInputLanguageGrammarAccess g = (NuSmvInputLanguageGrammarAccess) getGrammarAccess();
		
		// It's usually a good idea to activate the following three statements.
		// They will add and preserve newlines around comments
		c.setLinewrap(0, 1, 2).before(g.getSL_COMMENTRule());
		
		// MODULEs are always separated by a blank line
		c.setLinewrap(2).after(g.getModuleRule());

		// newline after every ModuleElement
		c.setLinewrap().before(g.getModuleElementRule());

		// newline after every 'case'
		c.setLinewrap().before(g.getCaseSimpleExpressionRule());
		
		// newline after 'case'..'esac'
		c.setLinewrap().after(g.getCaseExpressionRule());


		// indentation
		c.setWrappedLineIndentation(2);
		
		// every module element is indented
		c.setIndentationIncrement().before(g.getModuleElementRule());
		c.setIndentationDecrement().after(g.getModuleElementRule());
		
		// expressions within 'case'..'esac' are be indented
		c.setIndentationIncrement().before(g.getCaseSimpleExpressionRule());
		c.setIndentationIncrement().after(g.getCaseSimpleExpressionRule());
		
		System.out.println("configuring nusmv code formatter");
	}
}
